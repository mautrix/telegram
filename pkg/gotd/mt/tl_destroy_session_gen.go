// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// DestroySessionRequest represents TL type `destroy_session#e7512126`.
type DestroySessionRequest struct {
	// SessionID field of DestroySessionRequest.
	SessionID int64
}

// DestroySessionRequestTypeID is TL type id of DestroySessionRequest.
const DestroySessionRequestTypeID = 0xe7512126

// Ensuring interfaces in compile-time for DestroySessionRequest.
var (
	_ bin.Encoder     = &DestroySessionRequest{}
	_ bin.Decoder     = &DestroySessionRequest{}
	_ bin.BareEncoder = &DestroySessionRequest{}
	_ bin.BareDecoder = &DestroySessionRequest{}
)

func (d *DestroySessionRequest) Zero() bool {
	if d == nil {
		return true
	}
	if !(d.SessionID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (d *DestroySessionRequest) String() string {
	if d == nil {
		return "DestroySessionRequest(nil)"
	}
	type Alias DestroySessionRequest
	return fmt.Sprintf("DestroySessionRequest%+v", Alias(*d))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*DestroySessionRequest) TypeID() uint32 {
	return DestroySessionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*DestroySessionRequest) TypeName() string {
	return "destroy_session"
}

// TypeInfo returns info about TL type.
func (d *DestroySessionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "destroy_session",
		ID:   DestroySessionRequestTypeID,
	}
	if d == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "SessionID",
			SchemaName: "session_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (d *DestroySessionRequest) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode destroy_session#e7512126 as nil")
	}
	b.PutID(DestroySessionRequestTypeID)
	return d.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (d *DestroySessionRequest) EncodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode destroy_session#e7512126 as nil")
	}
	b.PutLong(d.SessionID)
	return nil
}

// Decode implements bin.Decoder.
func (d *DestroySessionRequest) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode destroy_session#e7512126 to nil")
	}
	if err := b.ConsumeID(DestroySessionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode destroy_session#e7512126: %w", err)
	}
	return d.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (d *DestroySessionRequest) DecodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode destroy_session#e7512126 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode destroy_session#e7512126: field session_id: %w", err)
		}
		d.SessionID = value
	}
	return nil
}

// GetSessionID returns value of SessionID field.
func (d *DestroySessionRequest) GetSessionID() (value int64) {
	if d == nil {
		return
	}
	return d.SessionID
}
