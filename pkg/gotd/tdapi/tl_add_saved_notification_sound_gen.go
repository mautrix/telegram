// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AddSavedNotificationSoundRequest represents TL type `addSavedNotificationSound#3e3984ef`.
type AddSavedNotificationSoundRequest struct {
	// Notification sound file to add
	Sound InputFileClass
}

// AddSavedNotificationSoundRequestTypeID is TL type id of AddSavedNotificationSoundRequest.
const AddSavedNotificationSoundRequestTypeID = 0x3e3984ef

// Ensuring interfaces in compile-time for AddSavedNotificationSoundRequest.
var (
	_ bin.Encoder     = &AddSavedNotificationSoundRequest{}
	_ bin.Decoder     = &AddSavedNotificationSoundRequest{}
	_ bin.BareEncoder = &AddSavedNotificationSoundRequest{}
	_ bin.BareDecoder = &AddSavedNotificationSoundRequest{}
)

func (a *AddSavedNotificationSoundRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Sound == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AddSavedNotificationSoundRequest) String() string {
	if a == nil {
		return "AddSavedNotificationSoundRequest(nil)"
	}
	type Alias AddSavedNotificationSoundRequest
	return fmt.Sprintf("AddSavedNotificationSoundRequest%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AddSavedNotificationSoundRequest) TypeID() uint32 {
	return AddSavedNotificationSoundRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AddSavedNotificationSoundRequest) TypeName() string {
	return "addSavedNotificationSound"
}

// TypeInfo returns info about TL type.
func (a *AddSavedNotificationSoundRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "addSavedNotificationSound",
		ID:   AddSavedNotificationSoundRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Sound",
			SchemaName: "sound",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AddSavedNotificationSoundRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addSavedNotificationSound#3e3984ef as nil")
	}
	b.PutID(AddSavedNotificationSoundRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AddSavedNotificationSoundRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addSavedNotificationSound#3e3984ef as nil")
	}
	if a.Sound == nil {
		return fmt.Errorf("unable to encode addSavedNotificationSound#3e3984ef: field sound is nil")
	}
	if err := a.Sound.Encode(b); err != nil {
		return fmt.Errorf("unable to encode addSavedNotificationSound#3e3984ef: field sound: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (a *AddSavedNotificationSoundRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addSavedNotificationSound#3e3984ef to nil")
	}
	if err := b.ConsumeID(AddSavedNotificationSoundRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode addSavedNotificationSound#3e3984ef: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AddSavedNotificationSoundRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addSavedNotificationSound#3e3984ef to nil")
	}
	{
		value, err := DecodeInputFile(b)
		if err != nil {
			return fmt.Errorf("unable to decode addSavedNotificationSound#3e3984ef: field sound: %w", err)
		}
		a.Sound = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AddSavedNotificationSoundRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode addSavedNotificationSound#3e3984ef as nil")
	}
	b.ObjStart()
	b.PutID("addSavedNotificationSound")
	b.Comma()
	b.FieldStart("sound")
	if a.Sound == nil {
		return fmt.Errorf("unable to encode addSavedNotificationSound#3e3984ef: field sound is nil")
	}
	if err := a.Sound.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode addSavedNotificationSound#3e3984ef: field sound: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AddSavedNotificationSoundRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode addSavedNotificationSound#3e3984ef to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("addSavedNotificationSound"); err != nil {
				return fmt.Errorf("unable to decode addSavedNotificationSound#3e3984ef: %w", err)
			}
		case "sound":
			value, err := DecodeTDLibJSONInputFile(b)
			if err != nil {
				return fmt.Errorf("unable to decode addSavedNotificationSound#3e3984ef: field sound: %w", err)
			}
			a.Sound = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSound returns value of Sound field.
func (a *AddSavedNotificationSoundRequest) GetSound() (value InputFileClass) {
	if a == nil {
		return
	}
	return a.Sound
}

// AddSavedNotificationSound invokes method addSavedNotificationSound#3e3984ef returning error if any.
func (c *Client) AddSavedNotificationSound(ctx context.Context, sound InputFileClass) (*NotificationSound, error) {
	var result NotificationSound

	request := &AddSavedNotificationSoundRequest{
		Sound: sound,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
