// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// GetStoryStatisticsRequest represents TL type `getStoryStatistics#3a964342`.
type GetStoryStatisticsRequest struct {
	// Chat identifier
	ChatID int64
	// Story identifier
	StoryID int32
	// Pass true if a dark theme is used by the application
	IsDark bool
}

// GetStoryStatisticsRequestTypeID is TL type id of GetStoryStatisticsRequest.
const GetStoryStatisticsRequestTypeID = 0x3a964342

// Ensuring interfaces in compile-time for GetStoryStatisticsRequest.
var (
	_ bin.Encoder     = &GetStoryStatisticsRequest{}
	_ bin.Decoder     = &GetStoryStatisticsRequest{}
	_ bin.BareEncoder = &GetStoryStatisticsRequest{}
	_ bin.BareDecoder = &GetStoryStatisticsRequest{}
)

func (g *GetStoryStatisticsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.ChatID == 0) {
		return false
	}
	if !(g.StoryID == 0) {
		return false
	}
	if !(g.IsDark == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetStoryStatisticsRequest) String() string {
	if g == nil {
		return "GetStoryStatisticsRequest(nil)"
	}
	type Alias GetStoryStatisticsRequest
	return fmt.Sprintf("GetStoryStatisticsRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetStoryStatisticsRequest) TypeID() uint32 {
	return GetStoryStatisticsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetStoryStatisticsRequest) TypeName() string {
	return "getStoryStatistics"
}

// TypeInfo returns info about TL type.
func (g *GetStoryStatisticsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getStoryStatistics",
		ID:   GetStoryStatisticsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "StoryID",
			SchemaName: "story_id",
		},
		{
			Name:       "IsDark",
			SchemaName: "is_dark",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetStoryStatisticsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getStoryStatistics#3a964342 as nil")
	}
	b.PutID(GetStoryStatisticsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetStoryStatisticsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getStoryStatistics#3a964342 as nil")
	}
	b.PutInt53(g.ChatID)
	b.PutInt32(g.StoryID)
	b.PutBool(g.IsDark)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetStoryStatisticsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getStoryStatistics#3a964342 to nil")
	}
	if err := b.ConsumeID(GetStoryStatisticsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getStoryStatistics#3a964342: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetStoryStatisticsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getStoryStatistics#3a964342 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode getStoryStatistics#3a964342: field chat_id: %w", err)
		}
		g.ChatID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getStoryStatistics#3a964342: field story_id: %w", err)
		}
		g.StoryID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode getStoryStatistics#3a964342: field is_dark: %w", err)
		}
		g.IsDark = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (g *GetStoryStatisticsRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getStoryStatistics#3a964342 as nil")
	}
	b.ObjStart()
	b.PutID("getStoryStatistics")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(g.ChatID)
	b.Comma()
	b.FieldStart("story_id")
	b.PutInt32(g.StoryID)
	b.Comma()
	b.FieldStart("is_dark")
	b.PutBool(g.IsDark)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (g *GetStoryStatisticsRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if g == nil {
		return fmt.Errorf("can't decode getStoryStatistics#3a964342 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("getStoryStatistics"); err != nil {
				return fmt.Errorf("unable to decode getStoryStatistics#3a964342: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode getStoryStatistics#3a964342: field chat_id: %w", err)
			}
			g.ChatID = value
		case "story_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode getStoryStatistics#3a964342: field story_id: %w", err)
			}
			g.StoryID = value
		case "is_dark":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode getStoryStatistics#3a964342: field is_dark: %w", err)
			}
			g.IsDark = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (g *GetStoryStatisticsRequest) GetChatID() (value int64) {
	if g == nil {
		return
	}
	return g.ChatID
}

// GetStoryID returns value of StoryID field.
func (g *GetStoryStatisticsRequest) GetStoryID() (value int32) {
	if g == nil {
		return
	}
	return g.StoryID
}

// GetIsDark returns value of IsDark field.
func (g *GetStoryStatisticsRequest) GetIsDark() (value bool) {
	if g == nil {
		return
	}
	return g.IsDark
}

// GetStoryStatistics invokes method getStoryStatistics#3a964342 returning error if any.
func (c *Client) GetStoryStatistics(ctx context.Context, request *GetStoryStatisticsRequest) (*StoryStatistics, error) {
	var result StoryStatistics

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
