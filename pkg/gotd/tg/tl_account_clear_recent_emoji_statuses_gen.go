// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AccountClearRecentEmojiStatusesRequest represents TL type `account.clearRecentEmojiStatuses#18201aae`.
// Clears list of recently used emoji statuses¹
//
// Links:
//  1. https://core.telegram.org/api/emoji-status
//
// See https://core.telegram.org/method/account.clearRecentEmojiStatuses for reference.
type AccountClearRecentEmojiStatusesRequest struct {
}

// AccountClearRecentEmojiStatusesRequestTypeID is TL type id of AccountClearRecentEmojiStatusesRequest.
const AccountClearRecentEmojiStatusesRequestTypeID = 0x18201aae

// Ensuring interfaces in compile-time for AccountClearRecentEmojiStatusesRequest.
var (
	_ bin.Encoder     = &AccountClearRecentEmojiStatusesRequest{}
	_ bin.Decoder     = &AccountClearRecentEmojiStatusesRequest{}
	_ bin.BareEncoder = &AccountClearRecentEmojiStatusesRequest{}
	_ bin.BareDecoder = &AccountClearRecentEmojiStatusesRequest{}
)

func (c *AccountClearRecentEmojiStatusesRequest) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *AccountClearRecentEmojiStatusesRequest) String() string {
	if c == nil {
		return "AccountClearRecentEmojiStatusesRequest(nil)"
	}
	type Alias AccountClearRecentEmojiStatusesRequest
	return fmt.Sprintf("AccountClearRecentEmojiStatusesRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AccountClearRecentEmojiStatusesRequest) TypeID() uint32 {
	return AccountClearRecentEmojiStatusesRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AccountClearRecentEmojiStatusesRequest) TypeName() string {
	return "account.clearRecentEmojiStatuses"
}

// TypeInfo returns info about TL type.
func (c *AccountClearRecentEmojiStatusesRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "account.clearRecentEmojiStatuses",
		ID:   AccountClearRecentEmojiStatusesRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *AccountClearRecentEmojiStatusesRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.clearRecentEmojiStatuses#18201aae as nil")
	}
	b.PutID(AccountClearRecentEmojiStatusesRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *AccountClearRecentEmojiStatusesRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.clearRecentEmojiStatuses#18201aae as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *AccountClearRecentEmojiStatusesRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.clearRecentEmojiStatuses#18201aae to nil")
	}
	if err := b.ConsumeID(AccountClearRecentEmojiStatusesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.clearRecentEmojiStatuses#18201aae: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *AccountClearRecentEmojiStatusesRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.clearRecentEmojiStatuses#18201aae to nil")
	}
	return nil
}

// AccountClearRecentEmojiStatuses invokes method account.clearRecentEmojiStatuses#18201aae returning error if any.
// Clears list of recently used emoji statuses¹
//
// Links:
//  1. https://core.telegram.org/api/emoji-status
//
// See https://core.telegram.org/method/account.clearRecentEmojiStatuses for reference.
func (c *Client) AccountClearRecentEmojiStatuses(ctx context.Context) (bool, error) {
	var result BoolBox

	request := &AccountClearRecentEmojiStatusesRequest{}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
