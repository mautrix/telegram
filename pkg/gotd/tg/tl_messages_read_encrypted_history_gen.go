// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesReadEncryptedHistoryRequest represents TL type `messages.readEncryptedHistory#7f4b690a`.
// Marks message history within a secret chat as read.
//
// See https://core.telegram.org/method/messages.readEncryptedHistory for reference.
type MessagesReadEncryptedHistoryRequest struct {
	// Secret chat ID
	Peer InputEncryptedChat
	// Maximum date value for received messages in history
	MaxDate int
}

// MessagesReadEncryptedHistoryRequestTypeID is TL type id of MessagesReadEncryptedHistoryRequest.
const MessagesReadEncryptedHistoryRequestTypeID = 0x7f4b690a

// Ensuring interfaces in compile-time for MessagesReadEncryptedHistoryRequest.
var (
	_ bin.Encoder     = &MessagesReadEncryptedHistoryRequest{}
	_ bin.Decoder     = &MessagesReadEncryptedHistoryRequest{}
	_ bin.BareEncoder = &MessagesReadEncryptedHistoryRequest{}
	_ bin.BareDecoder = &MessagesReadEncryptedHistoryRequest{}
)

func (r *MessagesReadEncryptedHistoryRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Peer.Zero()) {
		return false
	}
	if !(r.MaxDate == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *MessagesReadEncryptedHistoryRequest) String() string {
	if r == nil {
		return "MessagesReadEncryptedHistoryRequest(nil)"
	}
	type Alias MessagesReadEncryptedHistoryRequest
	return fmt.Sprintf("MessagesReadEncryptedHistoryRequest%+v", Alias(*r))
}

// FillFrom fills MessagesReadEncryptedHistoryRequest from given interface.
func (r *MessagesReadEncryptedHistoryRequest) FillFrom(from interface {
	GetPeer() (value InputEncryptedChat)
	GetMaxDate() (value int)
}) {
	r.Peer = from.GetPeer()
	r.MaxDate = from.GetMaxDate()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesReadEncryptedHistoryRequest) TypeID() uint32 {
	return MessagesReadEncryptedHistoryRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesReadEncryptedHistoryRequest) TypeName() string {
	return "messages.readEncryptedHistory"
}

// TypeInfo returns info about TL type.
func (r *MessagesReadEncryptedHistoryRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.readEncryptedHistory",
		ID:   MessagesReadEncryptedHistoryRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "MaxDate",
			SchemaName: "max_date",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *MessagesReadEncryptedHistoryRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readEncryptedHistory#7f4b690a as nil")
	}
	b.PutID(MessagesReadEncryptedHistoryRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *MessagesReadEncryptedHistoryRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readEncryptedHistory#7f4b690a as nil")
	}
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.readEncryptedHistory#7f4b690a: field peer: %w", err)
	}
	b.PutInt(r.MaxDate)
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReadEncryptedHistoryRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readEncryptedHistory#7f4b690a to nil")
	}
	if err := b.ConsumeID(MessagesReadEncryptedHistoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.readEncryptedHistory#7f4b690a: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *MessagesReadEncryptedHistoryRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readEncryptedHistory#7f4b690a to nil")
	}
	{
		if err := r.Peer.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.readEncryptedHistory#7f4b690a: field peer: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.readEncryptedHistory#7f4b690a: field max_date: %w", err)
		}
		r.MaxDate = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (r *MessagesReadEncryptedHistoryRequest) GetPeer() (value InputEncryptedChat) {
	if r == nil {
		return
	}
	return r.Peer
}

// GetMaxDate returns value of MaxDate field.
func (r *MessagesReadEncryptedHistoryRequest) GetMaxDate() (value int) {
	if r == nil {
		return
	}
	return r.MaxDate
}

// MessagesReadEncryptedHistory invokes method messages.readEncryptedHistory#7f4b690a returning error if any.
// Marks message history within a secret chat as read.
//
// Possible errors:
//
//	400 CHAT_ID_INVALID: The provided chat id is invalid.
//	400 MAX_DATE_INVALID: The specified maximum date is invalid.
//	400 MSG_WAIT_FAILED: A waiting call returned an error.
//
// See https://core.telegram.org/method/messages.readEncryptedHistory for reference.
func (c *Client) MessagesReadEncryptedHistory(ctx context.Context, request *MessagesReadEncryptedHistoryRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
