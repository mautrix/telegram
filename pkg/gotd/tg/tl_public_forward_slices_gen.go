//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PublicForwardClassArray is adapter for slice of PublicForwardClass.
type PublicForwardClassArray []PublicForwardClass

// Sort sorts slice of PublicForwardClass.
func (s PublicForwardClassArray) Sort(less func(a, b PublicForwardClass) bool) PublicForwardClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PublicForwardClass.
func (s PublicForwardClassArray) SortStable(less func(a, b PublicForwardClass) bool) PublicForwardClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PublicForwardClass.
func (s PublicForwardClassArray) Retain(keep func(x PublicForwardClass) bool) PublicForwardClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PublicForwardClassArray) First() (v PublicForwardClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PublicForwardClassArray) Last() (v PublicForwardClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PublicForwardClassArray) PopFirst() (v PublicForwardClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PublicForwardClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PublicForwardClassArray) Pop() (v PublicForwardClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsPublicForwardMessage returns copy with only PublicForwardMessage constructors.
func (s PublicForwardClassArray) AsPublicForwardMessage() (to PublicForwardMessageArray) {
	for _, elem := range s {
		value, ok := elem.(*PublicForwardMessage)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsPublicForwardStory returns copy with only PublicForwardStory constructors.
func (s PublicForwardClassArray) AsPublicForwardStory() (to PublicForwardStoryArray) {
	for _, elem := range s {
		value, ok := elem.(*PublicForwardStory)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// PublicForwardMessageArray is adapter for slice of PublicForwardMessage.
type PublicForwardMessageArray []PublicForwardMessage

// Sort sorts slice of PublicForwardMessage.
func (s PublicForwardMessageArray) Sort(less func(a, b PublicForwardMessage) bool) PublicForwardMessageArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PublicForwardMessage.
func (s PublicForwardMessageArray) SortStable(less func(a, b PublicForwardMessage) bool) PublicForwardMessageArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PublicForwardMessage.
func (s PublicForwardMessageArray) Retain(keep func(x PublicForwardMessage) bool) PublicForwardMessageArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PublicForwardMessageArray) First() (v PublicForwardMessage, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PublicForwardMessageArray) Last() (v PublicForwardMessage, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PublicForwardMessageArray) PopFirst() (v PublicForwardMessage, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PublicForwardMessage
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PublicForwardMessageArray) Pop() (v PublicForwardMessage, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// PublicForwardStoryArray is adapter for slice of PublicForwardStory.
type PublicForwardStoryArray []PublicForwardStory

// Sort sorts slice of PublicForwardStory.
func (s PublicForwardStoryArray) Sort(less func(a, b PublicForwardStory) bool) PublicForwardStoryArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PublicForwardStory.
func (s PublicForwardStoryArray) SortStable(less func(a, b PublicForwardStory) bool) PublicForwardStoryArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PublicForwardStory.
func (s PublicForwardStoryArray) Retain(keep func(x PublicForwardStory) bool) PublicForwardStoryArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PublicForwardStoryArray) First() (v PublicForwardStory, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PublicForwardStoryArray) Last() (v PublicForwardStory, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PublicForwardStoryArray) PopFirst() (v PublicForwardStory, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PublicForwardStory
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PublicForwardStoryArray) Pop() (v PublicForwardStory, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
