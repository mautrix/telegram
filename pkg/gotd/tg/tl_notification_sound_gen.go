// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// NotificationSoundDefault represents TL type `notificationSoundDefault#97e8bebe`.
// Indicates the default notification sound should be used
//
// See https://core.telegram.org/constructor/notificationSoundDefault for reference.
type NotificationSoundDefault struct {
}

// NotificationSoundDefaultTypeID is TL type id of NotificationSoundDefault.
const NotificationSoundDefaultTypeID = 0x97e8bebe

// construct implements constructor of NotificationSoundClass.
func (n NotificationSoundDefault) construct() NotificationSoundClass { return &n }

// Ensuring interfaces in compile-time for NotificationSoundDefault.
var (
	_ bin.Encoder     = &NotificationSoundDefault{}
	_ bin.Decoder     = &NotificationSoundDefault{}
	_ bin.BareEncoder = &NotificationSoundDefault{}
	_ bin.BareDecoder = &NotificationSoundDefault{}

	_ NotificationSoundClass = &NotificationSoundDefault{}
)

func (n *NotificationSoundDefault) Zero() bool {
	if n == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (n *NotificationSoundDefault) String() string {
	if n == nil {
		return "NotificationSoundDefault(nil)"
	}
	type Alias NotificationSoundDefault
	return fmt.Sprintf("NotificationSoundDefault%+v", Alias(*n))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*NotificationSoundDefault) TypeID() uint32 {
	return NotificationSoundDefaultTypeID
}

// TypeName returns name of type in TL schema.
func (*NotificationSoundDefault) TypeName() string {
	return "notificationSoundDefault"
}

// TypeInfo returns info about TL type.
func (n *NotificationSoundDefault) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "notificationSoundDefault",
		ID:   NotificationSoundDefaultTypeID,
	}
	if n == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (n *NotificationSoundDefault) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundDefault#97e8bebe as nil")
	}
	b.PutID(NotificationSoundDefaultTypeID)
	return n.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (n *NotificationSoundDefault) EncodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundDefault#97e8bebe as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (n *NotificationSoundDefault) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundDefault#97e8bebe to nil")
	}
	if err := b.ConsumeID(NotificationSoundDefaultTypeID); err != nil {
		return fmt.Errorf("unable to decode notificationSoundDefault#97e8bebe: %w", err)
	}
	return n.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (n *NotificationSoundDefault) DecodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundDefault#97e8bebe to nil")
	}
	return nil
}

// NotificationSoundNone represents TL type `notificationSoundNone#6f0c34df`.
// No notification sound should be used
//
// See https://core.telegram.org/constructor/notificationSoundNone for reference.
type NotificationSoundNone struct {
}

// NotificationSoundNoneTypeID is TL type id of NotificationSoundNone.
const NotificationSoundNoneTypeID = 0x6f0c34df

// construct implements constructor of NotificationSoundClass.
func (n NotificationSoundNone) construct() NotificationSoundClass { return &n }

// Ensuring interfaces in compile-time for NotificationSoundNone.
var (
	_ bin.Encoder     = &NotificationSoundNone{}
	_ bin.Decoder     = &NotificationSoundNone{}
	_ bin.BareEncoder = &NotificationSoundNone{}
	_ bin.BareDecoder = &NotificationSoundNone{}

	_ NotificationSoundClass = &NotificationSoundNone{}
)

func (n *NotificationSoundNone) Zero() bool {
	if n == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (n *NotificationSoundNone) String() string {
	if n == nil {
		return "NotificationSoundNone(nil)"
	}
	type Alias NotificationSoundNone
	return fmt.Sprintf("NotificationSoundNone%+v", Alias(*n))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*NotificationSoundNone) TypeID() uint32 {
	return NotificationSoundNoneTypeID
}

// TypeName returns name of type in TL schema.
func (*NotificationSoundNone) TypeName() string {
	return "notificationSoundNone"
}

// TypeInfo returns info about TL type.
func (n *NotificationSoundNone) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "notificationSoundNone",
		ID:   NotificationSoundNoneTypeID,
	}
	if n == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (n *NotificationSoundNone) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundNone#6f0c34df as nil")
	}
	b.PutID(NotificationSoundNoneTypeID)
	return n.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (n *NotificationSoundNone) EncodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundNone#6f0c34df as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (n *NotificationSoundNone) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundNone#6f0c34df to nil")
	}
	if err := b.ConsumeID(NotificationSoundNoneTypeID); err != nil {
		return fmt.Errorf("unable to decode notificationSoundNone#6f0c34df: %w", err)
	}
	return n.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (n *NotificationSoundNone) DecodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundNone#6f0c34df to nil")
	}
	return nil
}

// NotificationSoundLocal represents TL type `notificationSoundLocal#830b9ae4`.
// Indicates a specific local notification sound should be used
//
// See https://core.telegram.org/constructor/notificationSoundLocal for reference.
type NotificationSoundLocal struct {
	// Notification sound title
	Title string
	// Notification sound identifier (arbitrary data used by the client to identify a
	// specific local notification sound)
	Data string
}

// NotificationSoundLocalTypeID is TL type id of NotificationSoundLocal.
const NotificationSoundLocalTypeID = 0x830b9ae4

// construct implements constructor of NotificationSoundClass.
func (n NotificationSoundLocal) construct() NotificationSoundClass { return &n }

// Ensuring interfaces in compile-time for NotificationSoundLocal.
var (
	_ bin.Encoder     = &NotificationSoundLocal{}
	_ bin.Decoder     = &NotificationSoundLocal{}
	_ bin.BareEncoder = &NotificationSoundLocal{}
	_ bin.BareDecoder = &NotificationSoundLocal{}

	_ NotificationSoundClass = &NotificationSoundLocal{}
)

func (n *NotificationSoundLocal) Zero() bool {
	if n == nil {
		return true
	}
	if !(n.Title == "") {
		return false
	}
	if !(n.Data == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (n *NotificationSoundLocal) String() string {
	if n == nil {
		return "NotificationSoundLocal(nil)"
	}
	type Alias NotificationSoundLocal
	return fmt.Sprintf("NotificationSoundLocal%+v", Alias(*n))
}

// FillFrom fills NotificationSoundLocal from given interface.
func (n *NotificationSoundLocal) FillFrom(from interface {
	GetTitle() (value string)
	GetData() (value string)
}) {
	n.Title = from.GetTitle()
	n.Data = from.GetData()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*NotificationSoundLocal) TypeID() uint32 {
	return NotificationSoundLocalTypeID
}

// TypeName returns name of type in TL schema.
func (*NotificationSoundLocal) TypeName() string {
	return "notificationSoundLocal"
}

// TypeInfo returns info about TL type.
func (n *NotificationSoundLocal) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "notificationSoundLocal",
		ID:   NotificationSoundLocalTypeID,
	}
	if n == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Data",
			SchemaName: "data",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (n *NotificationSoundLocal) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundLocal#830b9ae4 as nil")
	}
	b.PutID(NotificationSoundLocalTypeID)
	return n.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (n *NotificationSoundLocal) EncodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundLocal#830b9ae4 as nil")
	}
	b.PutString(n.Title)
	b.PutString(n.Data)
	return nil
}

// Decode implements bin.Decoder.
func (n *NotificationSoundLocal) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundLocal#830b9ae4 to nil")
	}
	if err := b.ConsumeID(NotificationSoundLocalTypeID); err != nil {
		return fmt.Errorf("unable to decode notificationSoundLocal#830b9ae4: %w", err)
	}
	return n.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (n *NotificationSoundLocal) DecodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundLocal#830b9ae4 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode notificationSoundLocal#830b9ae4: field title: %w", err)
		}
		n.Title = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode notificationSoundLocal#830b9ae4: field data: %w", err)
		}
		n.Data = value
	}
	return nil
}

// GetTitle returns value of Title field.
func (n *NotificationSoundLocal) GetTitle() (value string) {
	if n == nil {
		return
	}
	return n.Title
}

// GetData returns value of Data field.
func (n *NotificationSoundLocal) GetData() (value string) {
	if n == nil {
		return
	}
	return n.Data
}

// NotificationSoundRingtone represents TL type `notificationSoundRingtone#ff6c8049`.
// A specific previously uploaded notification sound should be used
//
// See https://core.telegram.org/constructor/notificationSoundRingtone for reference.
type NotificationSoundRingtone struct {
	// Document ID of notification sound uploaded using account.uploadRingtone¹
	//
	// Links:
	//  1) https://core.telegram.org/method/account.uploadRingtone
	ID int64
}

// NotificationSoundRingtoneTypeID is TL type id of NotificationSoundRingtone.
const NotificationSoundRingtoneTypeID = 0xff6c8049

// construct implements constructor of NotificationSoundClass.
func (n NotificationSoundRingtone) construct() NotificationSoundClass { return &n }

// Ensuring interfaces in compile-time for NotificationSoundRingtone.
var (
	_ bin.Encoder     = &NotificationSoundRingtone{}
	_ bin.Decoder     = &NotificationSoundRingtone{}
	_ bin.BareEncoder = &NotificationSoundRingtone{}
	_ bin.BareDecoder = &NotificationSoundRingtone{}

	_ NotificationSoundClass = &NotificationSoundRingtone{}
)

func (n *NotificationSoundRingtone) Zero() bool {
	if n == nil {
		return true
	}
	if !(n.ID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (n *NotificationSoundRingtone) String() string {
	if n == nil {
		return "NotificationSoundRingtone(nil)"
	}
	type Alias NotificationSoundRingtone
	return fmt.Sprintf("NotificationSoundRingtone%+v", Alias(*n))
}

// FillFrom fills NotificationSoundRingtone from given interface.
func (n *NotificationSoundRingtone) FillFrom(from interface {
	GetID() (value int64)
}) {
	n.ID = from.GetID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*NotificationSoundRingtone) TypeID() uint32 {
	return NotificationSoundRingtoneTypeID
}

// TypeName returns name of type in TL schema.
func (*NotificationSoundRingtone) TypeName() string {
	return "notificationSoundRingtone"
}

// TypeInfo returns info about TL type.
func (n *NotificationSoundRingtone) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "notificationSoundRingtone",
		ID:   NotificationSoundRingtoneTypeID,
	}
	if n == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (n *NotificationSoundRingtone) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundRingtone#ff6c8049 as nil")
	}
	b.PutID(NotificationSoundRingtoneTypeID)
	return n.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (n *NotificationSoundRingtone) EncodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notificationSoundRingtone#ff6c8049 as nil")
	}
	b.PutLong(n.ID)
	return nil
}

// Decode implements bin.Decoder.
func (n *NotificationSoundRingtone) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundRingtone#ff6c8049 to nil")
	}
	if err := b.ConsumeID(NotificationSoundRingtoneTypeID); err != nil {
		return fmt.Errorf("unable to decode notificationSoundRingtone#ff6c8049: %w", err)
	}
	return n.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (n *NotificationSoundRingtone) DecodeBare(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notificationSoundRingtone#ff6c8049 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode notificationSoundRingtone#ff6c8049: field id: %w", err)
		}
		n.ID = value
	}
	return nil
}

// GetID returns value of ID field.
func (n *NotificationSoundRingtone) GetID() (value int64) {
	if n == nil {
		return
	}
	return n.ID
}

// NotificationSoundClassName is schema name of NotificationSoundClass.
const NotificationSoundClassName = "NotificationSound"

// NotificationSoundClass represents NotificationSound generic type.
//
// See https://core.telegram.org/type/NotificationSound for reference.
//
// Example:
//
//	g, err := tg.DecodeNotificationSound(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tg.NotificationSoundDefault: // notificationSoundDefault#97e8bebe
//	case *tg.NotificationSoundNone: // notificationSoundNone#6f0c34df
//	case *tg.NotificationSoundLocal: // notificationSoundLocal#830b9ae4
//	case *tg.NotificationSoundRingtone: // notificationSoundRingtone#ff6c8049
//	default: panic(v)
//	}
type NotificationSoundClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() NotificationSoundClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeNotificationSound implements binary de-serialization for NotificationSoundClass.
func DecodeNotificationSound(buf *bin.Buffer) (NotificationSoundClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case NotificationSoundDefaultTypeID:
		// Decoding notificationSoundDefault#97e8bebe.
		v := NotificationSoundDefault{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotificationSoundClass: %w", err)
		}
		return &v, nil
	case NotificationSoundNoneTypeID:
		// Decoding notificationSoundNone#6f0c34df.
		v := NotificationSoundNone{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotificationSoundClass: %w", err)
		}
		return &v, nil
	case NotificationSoundLocalTypeID:
		// Decoding notificationSoundLocal#830b9ae4.
		v := NotificationSoundLocal{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotificationSoundClass: %w", err)
		}
		return &v, nil
	case NotificationSoundRingtoneTypeID:
		// Decoding notificationSoundRingtone#ff6c8049.
		v := NotificationSoundRingtone{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotificationSoundClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode NotificationSoundClass: %w", bin.NewUnexpectedID(id))
	}
}

// NotificationSound boxes the NotificationSoundClass providing a helper.
type NotificationSoundBox struct {
	NotificationSound NotificationSoundClass
}

// Decode implements bin.Decoder for NotificationSoundBox.
func (b *NotificationSoundBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode NotificationSoundBox to nil")
	}
	v, err := DecodeNotificationSound(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.NotificationSound = v
	return nil
}

// Encode implements bin.Encode for NotificationSoundBox.
func (b *NotificationSoundBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.NotificationSound == nil {
		return fmt.Errorf("unable to encode NotificationSoundClass as nil")
	}
	return b.NotificationSound.Encode(buf)
}
