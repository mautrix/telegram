//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AuthLoginTokenClassArray is adapter for slice of AuthLoginTokenClass.
type AuthLoginTokenClassArray []AuthLoginTokenClass

// Sort sorts slice of AuthLoginTokenClass.
func (s AuthLoginTokenClassArray) Sort(less func(a, b AuthLoginTokenClass) bool) AuthLoginTokenClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of AuthLoginTokenClass.
func (s AuthLoginTokenClassArray) SortStable(less func(a, b AuthLoginTokenClass) bool) AuthLoginTokenClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of AuthLoginTokenClass.
func (s AuthLoginTokenClassArray) Retain(keep func(x AuthLoginTokenClass) bool) AuthLoginTokenClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s AuthLoginTokenClassArray) First() (v AuthLoginTokenClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AuthLoginTokenClassArray) Last() (v AuthLoginTokenClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AuthLoginTokenClassArray) PopFirst() (v AuthLoginTokenClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero AuthLoginTokenClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AuthLoginTokenClassArray) Pop() (v AuthLoginTokenClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsAuthLoginToken returns copy with only AuthLoginToken constructors.
func (s AuthLoginTokenClassArray) AsAuthLoginToken() (to AuthLoginTokenArray) {
	for _, elem := range s {
		value, ok := elem.(*AuthLoginToken)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsAuthLoginTokenMigrateTo returns copy with only AuthLoginTokenMigrateTo constructors.
func (s AuthLoginTokenClassArray) AsAuthLoginTokenMigrateTo() (to AuthLoginTokenMigrateToArray) {
	for _, elem := range s {
		value, ok := elem.(*AuthLoginTokenMigrateTo)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsAuthLoginTokenSuccess returns copy with only AuthLoginTokenSuccess constructors.
func (s AuthLoginTokenClassArray) AsAuthLoginTokenSuccess() (to AuthLoginTokenSuccessArray) {
	for _, elem := range s {
		value, ok := elem.(*AuthLoginTokenSuccess)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AuthLoginTokenArray is adapter for slice of AuthLoginToken.
type AuthLoginTokenArray []AuthLoginToken

// Sort sorts slice of AuthLoginToken.
func (s AuthLoginTokenArray) Sort(less func(a, b AuthLoginToken) bool) AuthLoginTokenArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of AuthLoginToken.
func (s AuthLoginTokenArray) SortStable(less func(a, b AuthLoginToken) bool) AuthLoginTokenArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of AuthLoginToken.
func (s AuthLoginTokenArray) Retain(keep func(x AuthLoginToken) bool) AuthLoginTokenArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s AuthLoginTokenArray) First() (v AuthLoginToken, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AuthLoginTokenArray) Last() (v AuthLoginToken, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AuthLoginTokenArray) PopFirst() (v AuthLoginToken, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero AuthLoginToken
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AuthLoginTokenArray) Pop() (v AuthLoginToken, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AuthLoginTokenMigrateToArray is adapter for slice of AuthLoginTokenMigrateTo.
type AuthLoginTokenMigrateToArray []AuthLoginTokenMigrateTo

// Sort sorts slice of AuthLoginTokenMigrateTo.
func (s AuthLoginTokenMigrateToArray) Sort(less func(a, b AuthLoginTokenMigrateTo) bool) AuthLoginTokenMigrateToArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of AuthLoginTokenMigrateTo.
func (s AuthLoginTokenMigrateToArray) SortStable(less func(a, b AuthLoginTokenMigrateTo) bool) AuthLoginTokenMigrateToArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of AuthLoginTokenMigrateTo.
func (s AuthLoginTokenMigrateToArray) Retain(keep func(x AuthLoginTokenMigrateTo) bool) AuthLoginTokenMigrateToArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s AuthLoginTokenMigrateToArray) First() (v AuthLoginTokenMigrateTo, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AuthLoginTokenMigrateToArray) Last() (v AuthLoginTokenMigrateTo, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AuthLoginTokenMigrateToArray) PopFirst() (v AuthLoginTokenMigrateTo, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero AuthLoginTokenMigrateTo
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AuthLoginTokenMigrateToArray) Pop() (v AuthLoginTokenMigrateTo, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AuthLoginTokenSuccessArray is adapter for slice of AuthLoginTokenSuccess.
type AuthLoginTokenSuccessArray []AuthLoginTokenSuccess

// Sort sorts slice of AuthLoginTokenSuccess.
func (s AuthLoginTokenSuccessArray) Sort(less func(a, b AuthLoginTokenSuccess) bool) AuthLoginTokenSuccessArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of AuthLoginTokenSuccess.
func (s AuthLoginTokenSuccessArray) SortStable(less func(a, b AuthLoginTokenSuccess) bool) AuthLoginTokenSuccessArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of AuthLoginTokenSuccess.
func (s AuthLoginTokenSuccessArray) Retain(keep func(x AuthLoginTokenSuccess) bool) AuthLoginTokenSuccessArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s AuthLoginTokenSuccessArray) First() (v AuthLoginTokenSuccess, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AuthLoginTokenSuccessArray) Last() (v AuthLoginTokenSuccess, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AuthLoginTokenSuccessArray) PopFirst() (v AuthLoginTokenSuccess, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero AuthLoginTokenSuccess
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AuthLoginTokenSuccessArray) Pop() (v AuthLoginTokenSuccess, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
