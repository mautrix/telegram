//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsGiveawayInfoClassArray is adapter for slice of PaymentsGiveawayInfoClass.
type PaymentsGiveawayInfoClassArray []PaymentsGiveawayInfoClass

// Sort sorts slice of PaymentsGiveawayInfoClass.
func (s PaymentsGiveawayInfoClassArray) Sort(less func(a, b PaymentsGiveawayInfoClass) bool) PaymentsGiveawayInfoClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsGiveawayInfoClass.
func (s PaymentsGiveawayInfoClassArray) SortStable(less func(a, b PaymentsGiveawayInfoClass) bool) PaymentsGiveawayInfoClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsGiveawayInfoClass.
func (s PaymentsGiveawayInfoClassArray) Retain(keep func(x PaymentsGiveawayInfoClass) bool) PaymentsGiveawayInfoClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsGiveawayInfoClassArray) First() (v PaymentsGiveawayInfoClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsGiveawayInfoClassArray) Last() (v PaymentsGiveawayInfoClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsGiveawayInfoClassArray) PopFirst() (v PaymentsGiveawayInfoClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsGiveawayInfoClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsGiveawayInfoClassArray) Pop() (v PaymentsGiveawayInfoClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsPaymentsGiveawayInfo returns copy with only PaymentsGiveawayInfo constructors.
func (s PaymentsGiveawayInfoClassArray) AsPaymentsGiveawayInfo() (to PaymentsGiveawayInfoArray) {
	for _, elem := range s {
		value, ok := elem.(*PaymentsGiveawayInfo)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsPaymentsGiveawayInfoResults returns copy with only PaymentsGiveawayInfoResults constructors.
func (s PaymentsGiveawayInfoClassArray) AsPaymentsGiveawayInfoResults() (to PaymentsGiveawayInfoResultsArray) {
	for _, elem := range s {
		value, ok := elem.(*PaymentsGiveawayInfoResults)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// PaymentsGiveawayInfoArray is adapter for slice of PaymentsGiveawayInfo.
type PaymentsGiveawayInfoArray []PaymentsGiveawayInfo

// Sort sorts slice of PaymentsGiveawayInfo.
func (s PaymentsGiveawayInfoArray) Sort(less func(a, b PaymentsGiveawayInfo) bool) PaymentsGiveawayInfoArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsGiveawayInfo.
func (s PaymentsGiveawayInfoArray) SortStable(less func(a, b PaymentsGiveawayInfo) bool) PaymentsGiveawayInfoArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsGiveawayInfo.
func (s PaymentsGiveawayInfoArray) Retain(keep func(x PaymentsGiveawayInfo) bool) PaymentsGiveawayInfoArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsGiveawayInfoArray) First() (v PaymentsGiveawayInfo, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsGiveawayInfoArray) Last() (v PaymentsGiveawayInfo, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsGiveawayInfoArray) PopFirst() (v PaymentsGiveawayInfo, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsGiveawayInfo
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsGiveawayInfoArray) Pop() (v PaymentsGiveawayInfo, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// PaymentsGiveawayInfoResultsArray is adapter for slice of PaymentsGiveawayInfoResults.
type PaymentsGiveawayInfoResultsArray []PaymentsGiveawayInfoResults

// Sort sorts slice of PaymentsGiveawayInfoResults.
func (s PaymentsGiveawayInfoResultsArray) Sort(less func(a, b PaymentsGiveawayInfoResults) bool) PaymentsGiveawayInfoResultsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsGiveawayInfoResults.
func (s PaymentsGiveawayInfoResultsArray) SortStable(less func(a, b PaymentsGiveawayInfoResults) bool) PaymentsGiveawayInfoResultsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsGiveawayInfoResults.
func (s PaymentsGiveawayInfoResultsArray) Retain(keep func(x PaymentsGiveawayInfoResults) bool) PaymentsGiveawayInfoResultsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsGiveawayInfoResultsArray) First() (v PaymentsGiveawayInfoResults, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsGiveawayInfoResultsArray) Last() (v PaymentsGiveawayInfoResults, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsGiveawayInfoResultsArray) PopFirst() (v PaymentsGiveawayInfoResults, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsGiveawayInfoResults
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsGiveawayInfoResultsArray) Pop() (v PaymentsGiveawayInfoResults, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
