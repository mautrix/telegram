// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesGetSearchResultsPositionsRequest represents TL type `messages.getSearchResultsPositions#9c7f2f10`.
// Returns sparse positions of messages of the specified type in the chat to be used for
// shared media scroll implementation.
// Returns the results in reverse chronological order (i.e., in order of decreasing
// message_id).
//
// See https://core.telegram.org/method/messages.getSearchResultsPositions for reference.
type MessagesGetSearchResultsPositionsRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Peer where to search
	Peer InputPeerClass
	// Search within the saved message dialog »¹ with this ID.
	//
	// Links:
	//  1) https://core.telegram.org/api/saved-messages
	//
	// Use SetSavedPeerID and GetSavedPeerID helpers.
	SavedPeerID InputPeerClass
	// Message filter, inputMessagesFilterEmpty¹, inputMessagesFilterMyMentions² filters
	// are not supported by this method.
	//
	// Links:
	//  1) https://core.telegram.org/constructor/inputMessagesFilterEmpty
	//  2) https://core.telegram.org/constructor/inputMessagesFilterMyMentions
	Filter MessagesFilterClass
	// Offsets for pagination, for more info click here¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	OffsetID int
	// Maximum number of results to return, see pagination¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	Limit int
}

// MessagesGetSearchResultsPositionsRequestTypeID is TL type id of MessagesGetSearchResultsPositionsRequest.
const MessagesGetSearchResultsPositionsRequestTypeID = 0x9c7f2f10

// Ensuring interfaces in compile-time for MessagesGetSearchResultsPositionsRequest.
var (
	_ bin.Encoder     = &MessagesGetSearchResultsPositionsRequest{}
	_ bin.Decoder     = &MessagesGetSearchResultsPositionsRequest{}
	_ bin.BareEncoder = &MessagesGetSearchResultsPositionsRequest{}
	_ bin.BareDecoder = &MessagesGetSearchResultsPositionsRequest{}
)

func (g *MessagesGetSearchResultsPositionsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Flags.Zero()) {
		return false
	}
	if !(g.Peer == nil) {
		return false
	}
	if !(g.SavedPeerID == nil) {
		return false
	}
	if !(g.Filter == nil) {
		return false
	}
	if !(g.OffsetID == 0) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *MessagesGetSearchResultsPositionsRequest) String() string {
	if g == nil {
		return "MessagesGetSearchResultsPositionsRequest(nil)"
	}
	type Alias MessagesGetSearchResultsPositionsRequest
	return fmt.Sprintf("MessagesGetSearchResultsPositionsRequest%+v", Alias(*g))
}

// FillFrom fills MessagesGetSearchResultsPositionsRequest from given interface.
func (g *MessagesGetSearchResultsPositionsRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetSavedPeerID() (value InputPeerClass, ok bool)
	GetFilter() (value MessagesFilterClass)
	GetOffsetID() (value int)
	GetLimit() (value int)
}) {
	g.Peer = from.GetPeer()
	if val, ok := from.GetSavedPeerID(); ok {
		g.SavedPeerID = val
	}

	g.Filter = from.GetFilter()
	g.OffsetID = from.GetOffsetID()
	g.Limit = from.GetLimit()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesGetSearchResultsPositionsRequest) TypeID() uint32 {
	return MessagesGetSearchResultsPositionsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesGetSearchResultsPositionsRequest) TypeName() string {
	return "messages.getSearchResultsPositions"
}

// TypeInfo returns info about TL type.
func (g *MessagesGetSearchResultsPositionsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.getSearchResultsPositions",
		ID:   MessagesGetSearchResultsPositionsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "SavedPeerID",
			SchemaName: "saved_peer_id",
			Null:       !g.Flags.Has(2),
		},
		{
			Name:       "Filter",
			SchemaName: "filter",
		},
		{
			Name:       "OffsetID",
			SchemaName: "offset_id",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (g *MessagesGetSearchResultsPositionsRequest) SetFlags() {
	if !(g.SavedPeerID == nil) {
		g.Flags.Set(2)
	}
}

// Encode implements bin.Encoder.
func (g *MessagesGetSearchResultsPositionsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getSearchResultsPositions#9c7f2f10 as nil")
	}
	b.PutID(MessagesGetSearchResultsPositionsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *MessagesGetSearchResultsPositionsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getSearchResultsPositions#9c7f2f10 as nil")
	}
	g.SetFlags()
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field flags: %w", err)
	}
	if g.Peer == nil {
		return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field peer: %w", err)
	}
	if g.Flags.Has(2) {
		if g.SavedPeerID == nil {
			return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field saved_peer_id is nil")
		}
		if err := g.SavedPeerID.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field saved_peer_id: %w", err)
		}
	}
	if g.Filter == nil {
		return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field filter is nil")
	}
	if err := g.Filter.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getSearchResultsPositions#9c7f2f10: field filter: %w", err)
	}
	b.PutInt(g.OffsetID)
	b.PutInt(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetSearchResultsPositionsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getSearchResultsPositions#9c7f2f10 to nil")
	}
	if err := b.ConsumeID(MessagesGetSearchResultsPositionsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *MessagesGetSearchResultsPositionsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getSearchResultsPositions#9c7f2f10 to nil")
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: field peer: %w", err)
		}
		g.Peer = value
	}
	if g.Flags.Has(2) {
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: field saved_peer_id: %w", err)
		}
		g.SavedPeerID = value
	}
	{
		value, err := DecodeMessagesFilter(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: field filter: %w", err)
		}
		g.Filter = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: field offset_id: %w", err)
		}
		g.OffsetID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSearchResultsPositions#9c7f2f10: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (g *MessagesGetSearchResultsPositionsRequest) GetPeer() (value InputPeerClass) {
	if g == nil {
		return
	}
	return g.Peer
}

// SetSavedPeerID sets value of SavedPeerID conditional field.
func (g *MessagesGetSearchResultsPositionsRequest) SetSavedPeerID(value InputPeerClass) {
	g.Flags.Set(2)
	g.SavedPeerID = value
}

// GetSavedPeerID returns value of SavedPeerID conditional field and
// boolean which is true if field was set.
func (g *MessagesGetSearchResultsPositionsRequest) GetSavedPeerID() (value InputPeerClass, ok bool) {
	if g == nil {
		return
	}
	if !g.Flags.Has(2) {
		return value, false
	}
	return g.SavedPeerID, true
}

// GetFilter returns value of Filter field.
func (g *MessagesGetSearchResultsPositionsRequest) GetFilter() (value MessagesFilterClass) {
	if g == nil {
		return
	}
	return g.Filter
}

// GetOffsetID returns value of OffsetID field.
func (g *MessagesGetSearchResultsPositionsRequest) GetOffsetID() (value int) {
	if g == nil {
		return
	}
	return g.OffsetID
}

// GetLimit returns value of Limit field.
func (g *MessagesGetSearchResultsPositionsRequest) GetLimit() (value int) {
	if g == nil {
		return
	}
	return g.Limit
}

// MessagesGetSearchResultsPositions invokes method messages.getSearchResultsPositions#9c7f2f10 returning error if any.
// Returns sparse positions of messages of the specified type in the chat to be used for
// shared media scroll implementation.
// Returns the results in reverse chronological order (i.e., in order of decreasing
// message_id).
//
// Possible errors:
//
//	400 PEER_ID_INVALID: The provided peer id is invalid.
//
// See https://core.telegram.org/method/messages.getSearchResultsPositions for reference.
func (c *Client) MessagesGetSearchResultsPositions(ctx context.Context, request *MessagesGetSearchResultsPositionsRequest) (*MessagesSearchResultsPositions, error) {
	var result MessagesSearchResultsPositions

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
