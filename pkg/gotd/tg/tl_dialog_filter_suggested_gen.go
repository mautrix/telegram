// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// DialogFilterSuggested represents TL type `dialogFilterSuggested#77744d4a`.
// Suggested folders¹
//
// Links:
//  1. https://core.telegram.org/api/folders
//
// See https://core.telegram.org/constructor/dialogFilterSuggested for reference.
type DialogFilterSuggested struct {
	// Folder info¹
	//
	// Links:
	//  1) https://core.telegram.org/api/folders
	Filter DialogFilterClass
	// Folder¹ description
	//
	// Links:
	//  1) https://core.telegram.org/api/folders
	Description string
}

// DialogFilterSuggestedTypeID is TL type id of DialogFilterSuggested.
const DialogFilterSuggestedTypeID = 0x77744d4a

// Ensuring interfaces in compile-time for DialogFilterSuggested.
var (
	_ bin.Encoder     = &DialogFilterSuggested{}
	_ bin.Decoder     = &DialogFilterSuggested{}
	_ bin.BareEncoder = &DialogFilterSuggested{}
	_ bin.BareDecoder = &DialogFilterSuggested{}
)

func (d *DialogFilterSuggested) Zero() bool {
	if d == nil {
		return true
	}
	if !(d.Filter == nil) {
		return false
	}
	if !(d.Description == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (d *DialogFilterSuggested) String() string {
	if d == nil {
		return "DialogFilterSuggested(nil)"
	}
	type Alias DialogFilterSuggested
	return fmt.Sprintf("DialogFilterSuggested%+v", Alias(*d))
}

// FillFrom fills DialogFilterSuggested from given interface.
func (d *DialogFilterSuggested) FillFrom(from interface {
	GetFilter() (value DialogFilterClass)
	GetDescription() (value string)
}) {
	d.Filter = from.GetFilter()
	d.Description = from.GetDescription()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*DialogFilterSuggested) TypeID() uint32 {
	return DialogFilterSuggestedTypeID
}

// TypeName returns name of type in TL schema.
func (*DialogFilterSuggested) TypeName() string {
	return "dialogFilterSuggested"
}

// TypeInfo returns info about TL type.
func (d *DialogFilterSuggested) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "dialogFilterSuggested",
		ID:   DialogFilterSuggestedTypeID,
	}
	if d == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Filter",
			SchemaName: "filter",
		},
		{
			Name:       "Description",
			SchemaName: "description",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (d *DialogFilterSuggested) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode dialogFilterSuggested#77744d4a as nil")
	}
	b.PutID(DialogFilterSuggestedTypeID)
	return d.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (d *DialogFilterSuggested) EncodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode dialogFilterSuggested#77744d4a as nil")
	}
	if d.Filter == nil {
		return fmt.Errorf("unable to encode dialogFilterSuggested#77744d4a: field filter is nil")
	}
	if err := d.Filter.Encode(b); err != nil {
		return fmt.Errorf("unable to encode dialogFilterSuggested#77744d4a: field filter: %w", err)
	}
	b.PutString(d.Description)
	return nil
}

// Decode implements bin.Decoder.
func (d *DialogFilterSuggested) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode dialogFilterSuggested#77744d4a to nil")
	}
	if err := b.ConsumeID(DialogFilterSuggestedTypeID); err != nil {
		return fmt.Errorf("unable to decode dialogFilterSuggested#77744d4a: %w", err)
	}
	return d.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (d *DialogFilterSuggested) DecodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode dialogFilterSuggested#77744d4a to nil")
	}
	{
		value, err := DecodeDialogFilter(b)
		if err != nil {
			return fmt.Errorf("unable to decode dialogFilterSuggested#77744d4a: field filter: %w", err)
		}
		d.Filter = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode dialogFilterSuggested#77744d4a: field description: %w", err)
		}
		d.Description = value
	}
	return nil
}

// GetFilter returns value of Filter field.
func (d *DialogFilterSuggested) GetFilter() (value DialogFilterClass) {
	if d == nil {
		return
	}
	return d.Filter
}

// GetDescription returns value of Description field.
func (d *DialogFilterSuggested) GetDescription() (value string) {
	if d == nil {
		return
	}
	return d.Description
}
