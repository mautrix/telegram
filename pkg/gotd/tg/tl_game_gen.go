// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// Game represents TL type `game#bdf9653b`.
// Indicates an already sent game
//
// See https://core.telegram.org/constructor/game for reference.
type Game struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// ID of the game
	ID int64
	// Access hash of the game
	AccessHash int64
	// Short name for the game
	ShortName string
	// Title of the game
	Title string
	// Game description
	Description string
	// Game preview
	Photo PhotoClass
	// Optional attached document
	//
	// Use SetDocument and GetDocument helpers.
	Document DocumentClass
}

// GameTypeID is TL type id of Game.
const GameTypeID = 0xbdf9653b

// Ensuring interfaces in compile-time for Game.
var (
	_ bin.Encoder     = &Game{}
	_ bin.Decoder     = &Game{}
	_ bin.BareEncoder = &Game{}
	_ bin.BareDecoder = &Game{}
)

func (g *Game) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Flags.Zero()) {
		return false
	}
	if !(g.ID == 0) {
		return false
	}
	if !(g.AccessHash == 0) {
		return false
	}
	if !(g.ShortName == "") {
		return false
	}
	if !(g.Title == "") {
		return false
	}
	if !(g.Description == "") {
		return false
	}
	if !(g.Photo == nil) {
		return false
	}
	if !(g.Document == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *Game) String() string {
	if g == nil {
		return "Game(nil)"
	}
	type Alias Game
	return fmt.Sprintf("Game%+v", Alias(*g))
}

// FillFrom fills Game from given interface.
func (g *Game) FillFrom(from interface {
	GetID() (value int64)
	GetAccessHash() (value int64)
	GetShortName() (value string)
	GetTitle() (value string)
	GetDescription() (value string)
	GetPhoto() (value PhotoClass)
	GetDocument() (value DocumentClass, ok bool)
}) {
	g.ID = from.GetID()
	g.AccessHash = from.GetAccessHash()
	g.ShortName = from.GetShortName()
	g.Title = from.GetTitle()
	g.Description = from.GetDescription()
	g.Photo = from.GetPhoto()
	if val, ok := from.GetDocument(); ok {
		g.Document = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*Game) TypeID() uint32 {
	return GameTypeID
}

// TypeName returns name of type in TL schema.
func (*Game) TypeName() string {
	return "game"
}

// TypeInfo returns info about TL type.
func (g *Game) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "game",
		ID:   GameTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "AccessHash",
			SchemaName: "access_hash",
		},
		{
			Name:       "ShortName",
			SchemaName: "short_name",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Description",
			SchemaName: "description",
		},
		{
			Name:       "Photo",
			SchemaName: "photo",
		},
		{
			Name:       "Document",
			SchemaName: "document",
			Null:       !g.Flags.Has(0),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (g *Game) SetFlags() {
	if !(g.Document == nil) {
		g.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (g *Game) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode game#bdf9653b as nil")
	}
	b.PutID(GameTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *Game) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode game#bdf9653b as nil")
	}
	g.SetFlags()
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode game#bdf9653b: field flags: %w", err)
	}
	b.PutLong(g.ID)
	b.PutLong(g.AccessHash)
	b.PutString(g.ShortName)
	b.PutString(g.Title)
	b.PutString(g.Description)
	if g.Photo == nil {
		return fmt.Errorf("unable to encode game#bdf9653b: field photo is nil")
	}
	if err := g.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode game#bdf9653b: field photo: %w", err)
	}
	if g.Flags.Has(0) {
		if g.Document == nil {
			return fmt.Errorf("unable to encode game#bdf9653b: field document is nil")
		}
		if err := g.Document.Encode(b); err != nil {
			return fmt.Errorf("unable to encode game#bdf9653b: field document: %w", err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *Game) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode game#bdf9653b to nil")
	}
	if err := b.ConsumeID(GameTypeID); err != nil {
		return fmt.Errorf("unable to decode game#bdf9653b: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *Game) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode game#bdf9653b to nil")
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field id: %w", err)
		}
		g.ID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field access_hash: %w", err)
		}
		g.AccessHash = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field short_name: %w", err)
		}
		g.ShortName = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field title: %w", err)
		}
		g.Title = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field description: %w", err)
		}
		g.Description = value
	}
	{
		value, err := DecodePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field photo: %w", err)
		}
		g.Photo = value
	}
	if g.Flags.Has(0) {
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode game#bdf9653b: field document: %w", err)
		}
		g.Document = value
	}
	return nil
}

// GetID returns value of ID field.
func (g *Game) GetID() (value int64) {
	if g == nil {
		return
	}
	return g.ID
}

// GetAccessHash returns value of AccessHash field.
func (g *Game) GetAccessHash() (value int64) {
	if g == nil {
		return
	}
	return g.AccessHash
}

// GetShortName returns value of ShortName field.
func (g *Game) GetShortName() (value string) {
	if g == nil {
		return
	}
	return g.ShortName
}

// GetTitle returns value of Title field.
func (g *Game) GetTitle() (value string) {
	if g == nil {
		return
	}
	return g.Title
}

// GetDescription returns value of Description field.
func (g *Game) GetDescription() (value string) {
	if g == nil {
		return
	}
	return g.Description
}

// GetPhoto returns value of Photo field.
func (g *Game) GetPhoto() (value PhotoClass) {
	if g == nil {
		return
	}
	return g.Photo
}

// SetDocument sets value of Document conditional field.
func (g *Game) SetDocument(value DocumentClass) {
	g.Flags.Set(0)
	g.Document = value
}

// GetDocument returns value of Document conditional field and
// boolean which is true if field was set.
func (g *Game) GetDocument() (value DocumentClass, ok bool) {
	if g == nil {
		return
	}
	if !g.Flags.Has(0) {
		return value, false
	}
	return g.Document, true
}

// GetPhotoAsNotEmpty returns mapped value of Photo field.
func (g *Game) GetPhotoAsNotEmpty() (*Photo, bool) {
	return g.Photo.AsNotEmpty()
}

// GetDocumentAsNotEmpty returns mapped value of Document conditional field and
// boolean which is true if field was set.
func (g *Game) GetDocumentAsNotEmpty() (*Document, bool) {
	if value, ok := g.GetDocument(); ok {
		return value.AsNotEmpty()
	}
	return nil, false
}
