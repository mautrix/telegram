//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SecurePlainDataClassArray is adapter for slice of SecurePlainDataClass.
type SecurePlainDataClassArray []SecurePlainDataClass

// Sort sorts slice of SecurePlainDataClass.
func (s SecurePlainDataClassArray) Sort(less func(a, b SecurePlainDataClass) bool) SecurePlainDataClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SecurePlainDataClass.
func (s SecurePlainDataClassArray) SortStable(less func(a, b SecurePlainDataClass) bool) SecurePlainDataClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SecurePlainDataClass.
func (s SecurePlainDataClassArray) Retain(keep func(x SecurePlainDataClass) bool) SecurePlainDataClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SecurePlainDataClassArray) First() (v SecurePlainDataClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SecurePlainDataClassArray) Last() (v SecurePlainDataClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SecurePlainDataClassArray) PopFirst() (v SecurePlainDataClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SecurePlainDataClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SecurePlainDataClassArray) Pop() (v SecurePlainDataClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsSecurePlainPhone returns copy with only SecurePlainPhone constructors.
func (s SecurePlainDataClassArray) AsSecurePlainPhone() (to SecurePlainPhoneArray) {
	for _, elem := range s {
		value, ok := elem.(*SecurePlainPhone)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsSecurePlainEmail returns copy with only SecurePlainEmail constructors.
func (s SecurePlainDataClassArray) AsSecurePlainEmail() (to SecurePlainEmailArray) {
	for _, elem := range s {
		value, ok := elem.(*SecurePlainEmail)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// SecurePlainPhoneArray is adapter for slice of SecurePlainPhone.
type SecurePlainPhoneArray []SecurePlainPhone

// Sort sorts slice of SecurePlainPhone.
func (s SecurePlainPhoneArray) Sort(less func(a, b SecurePlainPhone) bool) SecurePlainPhoneArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SecurePlainPhone.
func (s SecurePlainPhoneArray) SortStable(less func(a, b SecurePlainPhone) bool) SecurePlainPhoneArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SecurePlainPhone.
func (s SecurePlainPhoneArray) Retain(keep func(x SecurePlainPhone) bool) SecurePlainPhoneArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SecurePlainPhoneArray) First() (v SecurePlainPhone, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SecurePlainPhoneArray) Last() (v SecurePlainPhone, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SecurePlainPhoneArray) PopFirst() (v SecurePlainPhone, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SecurePlainPhone
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SecurePlainPhoneArray) Pop() (v SecurePlainPhone, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SecurePlainEmailArray is adapter for slice of SecurePlainEmail.
type SecurePlainEmailArray []SecurePlainEmail

// Sort sorts slice of SecurePlainEmail.
func (s SecurePlainEmailArray) Sort(less func(a, b SecurePlainEmail) bool) SecurePlainEmailArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SecurePlainEmail.
func (s SecurePlainEmailArray) SortStable(less func(a, b SecurePlainEmail) bool) SecurePlainEmailArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SecurePlainEmail.
func (s SecurePlainEmailArray) Retain(keep func(x SecurePlainEmail) bool) SecurePlainEmailArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SecurePlainEmailArray) First() (v SecurePlainEmail, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SecurePlainEmailArray) Last() (v SecurePlainEmail, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SecurePlainEmailArray) PopFirst() (v SecurePlainEmail, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SecurePlainEmail
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SecurePlainEmailArray) Pop() (v SecurePlainEmail, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
