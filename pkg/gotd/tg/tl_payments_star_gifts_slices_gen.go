//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsStarGiftsClassArray is adapter for slice of PaymentsStarGiftsClass.
type PaymentsStarGiftsClassArray []PaymentsStarGiftsClass

// Sort sorts slice of PaymentsStarGiftsClass.
func (s PaymentsStarGiftsClassArray) Sort(less func(a, b PaymentsStarGiftsClass) bool) PaymentsStarGiftsClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsStarGiftsClass.
func (s PaymentsStarGiftsClassArray) SortStable(less func(a, b PaymentsStarGiftsClass) bool) PaymentsStarGiftsClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsStarGiftsClass.
func (s PaymentsStarGiftsClassArray) Retain(keep func(x PaymentsStarGiftsClass) bool) PaymentsStarGiftsClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsStarGiftsClassArray) First() (v PaymentsStarGiftsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsStarGiftsClassArray) Last() (v PaymentsStarGiftsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsStarGiftsClassArray) PopFirst() (v PaymentsStarGiftsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsStarGiftsClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsStarGiftsClassArray) Pop() (v PaymentsStarGiftsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsPaymentsStarGifts returns copy with only PaymentsStarGifts constructors.
func (s PaymentsStarGiftsClassArray) AsPaymentsStarGifts() (to PaymentsStarGiftsArray) {
	for _, elem := range s {
		value, ok := elem.(*PaymentsStarGifts)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s PaymentsStarGiftsClassArray) AppendOnlyModified(to []*PaymentsStarGifts) []*PaymentsStarGifts {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s PaymentsStarGiftsClassArray) AsModified() (to []*PaymentsStarGifts) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s PaymentsStarGiftsClassArray) FirstAsModified() (v *PaymentsStarGifts, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s PaymentsStarGiftsClassArray) LastAsModified() (v *PaymentsStarGifts, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *PaymentsStarGiftsClassArray) PopFirstAsModified() (v *PaymentsStarGifts, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *PaymentsStarGiftsClassArray) PopAsModified() (v *PaymentsStarGifts, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// PaymentsStarGiftsArray is adapter for slice of PaymentsStarGifts.
type PaymentsStarGiftsArray []PaymentsStarGifts

// Sort sorts slice of PaymentsStarGifts.
func (s PaymentsStarGiftsArray) Sort(less func(a, b PaymentsStarGifts) bool) PaymentsStarGiftsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsStarGifts.
func (s PaymentsStarGiftsArray) SortStable(less func(a, b PaymentsStarGifts) bool) PaymentsStarGiftsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsStarGifts.
func (s PaymentsStarGiftsArray) Retain(keep func(x PaymentsStarGifts) bool) PaymentsStarGiftsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsStarGiftsArray) First() (v PaymentsStarGifts, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsStarGiftsArray) Last() (v PaymentsStarGifts, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsStarGiftsArray) PopFirst() (v PaymentsStarGifts, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsStarGifts
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsStarGiftsArray) Pop() (v PaymentsStarGifts, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
