//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// RequirementToContactClassArray is adapter for slice of RequirementToContactClass.
type RequirementToContactClassArray []RequirementToContactClass

// Sort sorts slice of RequirementToContactClass.
func (s RequirementToContactClassArray) Sort(less func(a, b RequirementToContactClass) bool) RequirementToContactClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of RequirementToContactClass.
func (s RequirementToContactClassArray) SortStable(less func(a, b RequirementToContactClass) bool) RequirementToContactClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of RequirementToContactClass.
func (s RequirementToContactClassArray) Retain(keep func(x RequirementToContactClass) bool) RequirementToContactClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s RequirementToContactClassArray) First() (v RequirementToContactClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s RequirementToContactClassArray) Last() (v RequirementToContactClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *RequirementToContactClassArray) PopFirst() (v RequirementToContactClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero RequirementToContactClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *RequirementToContactClassArray) Pop() (v RequirementToContactClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsRequirementToContactPaidMessages returns copy with only RequirementToContactPaidMessages constructors.
func (s RequirementToContactClassArray) AsRequirementToContactPaidMessages() (to RequirementToContactPaidMessagesArray) {
	for _, elem := range s {
		value, ok := elem.(*RequirementToContactPaidMessages)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// RequirementToContactPaidMessagesArray is adapter for slice of RequirementToContactPaidMessages.
type RequirementToContactPaidMessagesArray []RequirementToContactPaidMessages

// Sort sorts slice of RequirementToContactPaidMessages.
func (s RequirementToContactPaidMessagesArray) Sort(less func(a, b RequirementToContactPaidMessages) bool) RequirementToContactPaidMessagesArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of RequirementToContactPaidMessages.
func (s RequirementToContactPaidMessagesArray) SortStable(less func(a, b RequirementToContactPaidMessages) bool) RequirementToContactPaidMessagesArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of RequirementToContactPaidMessages.
func (s RequirementToContactPaidMessagesArray) Retain(keep func(x RequirementToContactPaidMessages) bool) RequirementToContactPaidMessagesArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s RequirementToContactPaidMessagesArray) First() (v RequirementToContactPaidMessages, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s RequirementToContactPaidMessagesArray) Last() (v RequirementToContactPaidMessages, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *RequirementToContactPaidMessagesArray) PopFirst() (v RequirementToContactPaidMessages, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero RequirementToContactPaidMessages
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *RequirementToContactPaidMessagesArray) Pop() (v RequirementToContactPaidMessages, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
