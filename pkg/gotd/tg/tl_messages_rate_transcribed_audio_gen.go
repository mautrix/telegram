// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesRateTranscribedAudioRequest represents TL type `messages.rateTranscribedAudio#7f1d072f`.
// Rate transcribed voice message¹
//
// Links:
//  1. https://core.telegram.org/api/transcribe
//
// See https://core.telegram.org/method/messages.rateTranscribedAudio for reference.
type MessagesRateTranscribedAudioRequest struct {
	// Peer where the voice message was sent
	Peer InputPeerClass
	// Message ID
	MsgID int
	// Transcription ID
	TranscriptionID int64
	// Whether the transcription was correct
	Good bool
}

// MessagesRateTranscribedAudioRequestTypeID is TL type id of MessagesRateTranscribedAudioRequest.
const MessagesRateTranscribedAudioRequestTypeID = 0x7f1d072f

// Ensuring interfaces in compile-time for MessagesRateTranscribedAudioRequest.
var (
	_ bin.Encoder     = &MessagesRateTranscribedAudioRequest{}
	_ bin.Decoder     = &MessagesRateTranscribedAudioRequest{}
	_ bin.BareEncoder = &MessagesRateTranscribedAudioRequest{}
	_ bin.BareDecoder = &MessagesRateTranscribedAudioRequest{}
)

func (r *MessagesRateTranscribedAudioRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Peer == nil) {
		return false
	}
	if !(r.MsgID == 0) {
		return false
	}
	if !(r.TranscriptionID == 0) {
		return false
	}
	if !(r.Good == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *MessagesRateTranscribedAudioRequest) String() string {
	if r == nil {
		return "MessagesRateTranscribedAudioRequest(nil)"
	}
	type Alias MessagesRateTranscribedAudioRequest
	return fmt.Sprintf("MessagesRateTranscribedAudioRequest%+v", Alias(*r))
}

// FillFrom fills MessagesRateTranscribedAudioRequest from given interface.
func (r *MessagesRateTranscribedAudioRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetMsgID() (value int)
	GetTranscriptionID() (value int64)
	GetGood() (value bool)
}) {
	r.Peer = from.GetPeer()
	r.MsgID = from.GetMsgID()
	r.TranscriptionID = from.GetTranscriptionID()
	r.Good = from.GetGood()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesRateTranscribedAudioRequest) TypeID() uint32 {
	return MessagesRateTranscribedAudioRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesRateTranscribedAudioRequest) TypeName() string {
	return "messages.rateTranscribedAudio"
}

// TypeInfo returns info about TL type.
func (r *MessagesRateTranscribedAudioRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.rateTranscribedAudio",
		ID:   MessagesRateTranscribedAudioRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "MsgID",
			SchemaName: "msg_id",
		},
		{
			Name:       "TranscriptionID",
			SchemaName: "transcription_id",
		},
		{
			Name:       "Good",
			SchemaName: "good",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *MessagesRateTranscribedAudioRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.rateTranscribedAudio#7f1d072f as nil")
	}
	b.PutID(MessagesRateTranscribedAudioRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *MessagesRateTranscribedAudioRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.rateTranscribedAudio#7f1d072f as nil")
	}
	if r.Peer == nil {
		return fmt.Errorf("unable to encode messages.rateTranscribedAudio#7f1d072f: field peer is nil")
	}
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.rateTranscribedAudio#7f1d072f: field peer: %w", err)
	}
	b.PutInt(r.MsgID)
	b.PutLong(r.TranscriptionID)
	b.PutBool(r.Good)
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesRateTranscribedAudioRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.rateTranscribedAudio#7f1d072f to nil")
	}
	if err := b.ConsumeID(MessagesRateTranscribedAudioRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.rateTranscribedAudio#7f1d072f: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *MessagesRateTranscribedAudioRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.rateTranscribedAudio#7f1d072f to nil")
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.rateTranscribedAudio#7f1d072f: field peer: %w", err)
		}
		r.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.rateTranscribedAudio#7f1d072f: field msg_id: %w", err)
		}
		r.MsgID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.rateTranscribedAudio#7f1d072f: field transcription_id: %w", err)
		}
		r.TranscriptionID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode messages.rateTranscribedAudio#7f1d072f: field good: %w", err)
		}
		r.Good = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (r *MessagesRateTranscribedAudioRequest) GetPeer() (value InputPeerClass) {
	if r == nil {
		return
	}
	return r.Peer
}

// GetMsgID returns value of MsgID field.
func (r *MessagesRateTranscribedAudioRequest) GetMsgID() (value int) {
	if r == nil {
		return
	}
	return r.MsgID
}

// GetTranscriptionID returns value of TranscriptionID field.
func (r *MessagesRateTranscribedAudioRequest) GetTranscriptionID() (value int64) {
	if r == nil {
		return
	}
	return r.TranscriptionID
}

// GetGood returns value of Good field.
func (r *MessagesRateTranscribedAudioRequest) GetGood() (value bool) {
	if r == nil {
		return
	}
	return r.Good
}

// MessagesRateTranscribedAudio invokes method messages.rateTranscribedAudio#7f1d072f returning error if any.
// Rate transcribed voice message¹
//
// Links:
//  1. https://core.telegram.org/api/transcribe
//
// See https://core.telegram.org/method/messages.rateTranscribedAudio for reference.
func (c *Client) MessagesRateTranscribedAudio(ctx context.Context, request *MessagesRateTranscribedAudioRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
