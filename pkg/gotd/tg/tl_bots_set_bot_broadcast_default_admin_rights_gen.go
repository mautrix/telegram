// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BotsSetBotBroadcastDefaultAdminRightsRequest represents TL type `bots.setBotBroadcastDefaultAdminRights#788464e1`.
// Set the default suggested admin rights¹ for bots being added as admins to channels,
// see here for more info on how to handle them »².
//
// Links:
//  1. https://core.telegram.org/api/rights#suggested-bot-rights
//  2. https://core.telegram.org/api/rights#suggested-bot-rights
//
// See https://core.telegram.org/method/bots.setBotBroadcastDefaultAdminRights for reference.
type BotsSetBotBroadcastDefaultAdminRightsRequest struct {
	// Admin rights
	AdminRights ChatAdminRights
}

// BotsSetBotBroadcastDefaultAdminRightsRequestTypeID is TL type id of BotsSetBotBroadcastDefaultAdminRightsRequest.
const BotsSetBotBroadcastDefaultAdminRightsRequestTypeID = 0x788464e1

// Ensuring interfaces in compile-time for BotsSetBotBroadcastDefaultAdminRightsRequest.
var (
	_ bin.Encoder     = &BotsSetBotBroadcastDefaultAdminRightsRequest{}
	_ bin.Decoder     = &BotsSetBotBroadcastDefaultAdminRightsRequest{}
	_ bin.BareEncoder = &BotsSetBotBroadcastDefaultAdminRightsRequest{}
	_ bin.BareDecoder = &BotsSetBotBroadcastDefaultAdminRightsRequest{}
)

func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.AdminRights.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) String() string {
	if s == nil {
		return "BotsSetBotBroadcastDefaultAdminRightsRequest(nil)"
	}
	type Alias BotsSetBotBroadcastDefaultAdminRightsRequest
	return fmt.Sprintf("BotsSetBotBroadcastDefaultAdminRightsRequest%+v", Alias(*s))
}

// FillFrom fills BotsSetBotBroadcastDefaultAdminRightsRequest from given interface.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) FillFrom(from interface {
	GetAdminRights() (value ChatAdminRights)
}) {
	s.AdminRights = from.GetAdminRights()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotsSetBotBroadcastDefaultAdminRightsRequest) TypeID() uint32 {
	return BotsSetBotBroadcastDefaultAdminRightsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*BotsSetBotBroadcastDefaultAdminRightsRequest) TypeName() string {
	return "bots.setBotBroadcastDefaultAdminRights"
}

// TypeInfo returns info about TL type.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "bots.setBotBroadcastDefaultAdminRights",
		ID:   BotsSetBotBroadcastDefaultAdminRightsRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "AdminRights",
			SchemaName: "admin_rights",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotBroadcastDefaultAdminRights#788464e1 as nil")
	}
	b.PutID(BotsSetBotBroadcastDefaultAdminRightsRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotBroadcastDefaultAdminRights#788464e1 as nil")
	}
	if err := s.AdminRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode bots.setBotBroadcastDefaultAdminRights#788464e1: field admin_rights: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotBroadcastDefaultAdminRights#788464e1 to nil")
	}
	if err := b.ConsumeID(BotsSetBotBroadcastDefaultAdminRightsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode bots.setBotBroadcastDefaultAdminRights#788464e1: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotBroadcastDefaultAdminRights#788464e1 to nil")
	}
	{
		if err := s.AdminRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode bots.setBotBroadcastDefaultAdminRights#788464e1: field admin_rights: %w", err)
		}
	}
	return nil
}

// GetAdminRights returns value of AdminRights field.
func (s *BotsSetBotBroadcastDefaultAdminRightsRequest) GetAdminRights() (value ChatAdminRights) {
	if s == nil {
		return
	}
	return s.AdminRights
}

// BotsSetBotBroadcastDefaultAdminRights invokes method bots.setBotBroadcastDefaultAdminRights#788464e1 returning error if any.
// Set the default suggested admin rights¹ for bots being added as admins to channels,
// see here for more info on how to handle them »².
//
// Links:
//  1. https://core.telegram.org/api/rights#suggested-bot-rights
//  2. https://core.telegram.org/api/rights#suggested-bot-rights
//
// Possible errors:
//
//	400 RIGHTS_NOT_MODIFIED: The new admin rights are equal to the old rights, no change was made.
//	400 USER_BOT_REQUIRED: This method can only be called by a bot.
//
// See https://core.telegram.org/method/bots.setBotBroadcastDefaultAdminRights for reference.
// Can be used by bots.
func (c *Client) BotsSetBotBroadcastDefaultAdminRights(ctx context.Context, adminrights ChatAdminRights) (bool, error) {
	var result BoolBox

	request := &BotsSetBotBroadcastDefaultAdminRightsRequest{
		AdminRights: adminrights,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
