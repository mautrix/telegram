//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesExportedChatInviteClassArray is adapter for slice of MessagesExportedChatInviteClass.
type MessagesExportedChatInviteClassArray []MessagesExportedChatInviteClass

// Sort sorts slice of MessagesExportedChatInviteClass.
func (s MessagesExportedChatInviteClassArray) Sort(less func(a, b MessagesExportedChatInviteClass) bool) MessagesExportedChatInviteClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesExportedChatInviteClass.
func (s MessagesExportedChatInviteClassArray) SortStable(less func(a, b MessagesExportedChatInviteClass) bool) MessagesExportedChatInviteClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesExportedChatInviteClass.
func (s MessagesExportedChatInviteClassArray) Retain(keep func(x MessagesExportedChatInviteClass) bool) MessagesExportedChatInviteClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesExportedChatInviteClassArray) First() (v MessagesExportedChatInviteClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesExportedChatInviteClassArray) Last() (v MessagesExportedChatInviteClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesExportedChatInviteClassArray) PopFirst() (v MessagesExportedChatInviteClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesExportedChatInviteClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesExportedChatInviteClassArray) Pop() (v MessagesExportedChatInviteClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsMessagesExportedChatInvite returns copy with only MessagesExportedChatInvite constructors.
func (s MessagesExportedChatInviteClassArray) AsMessagesExportedChatInvite() (to MessagesExportedChatInviteArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesExportedChatInvite)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessagesExportedChatInviteReplaced returns copy with only MessagesExportedChatInviteReplaced constructors.
func (s MessagesExportedChatInviteClassArray) AsMessagesExportedChatInviteReplaced() (to MessagesExportedChatInviteReplacedArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesExportedChatInviteReplaced)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// MessagesExportedChatInviteArray is adapter for slice of MessagesExportedChatInvite.
type MessagesExportedChatInviteArray []MessagesExportedChatInvite

// Sort sorts slice of MessagesExportedChatInvite.
func (s MessagesExportedChatInviteArray) Sort(less func(a, b MessagesExportedChatInvite) bool) MessagesExportedChatInviteArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesExportedChatInvite.
func (s MessagesExportedChatInviteArray) SortStable(less func(a, b MessagesExportedChatInvite) bool) MessagesExportedChatInviteArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesExportedChatInvite.
func (s MessagesExportedChatInviteArray) Retain(keep func(x MessagesExportedChatInvite) bool) MessagesExportedChatInviteArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesExportedChatInviteArray) First() (v MessagesExportedChatInvite, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesExportedChatInviteArray) Last() (v MessagesExportedChatInvite, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesExportedChatInviteArray) PopFirst() (v MessagesExportedChatInvite, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesExportedChatInvite
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesExportedChatInviteArray) Pop() (v MessagesExportedChatInvite, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessagesExportedChatInviteReplacedArray is adapter for slice of MessagesExportedChatInviteReplaced.
type MessagesExportedChatInviteReplacedArray []MessagesExportedChatInviteReplaced

// Sort sorts slice of MessagesExportedChatInviteReplaced.
func (s MessagesExportedChatInviteReplacedArray) Sort(less func(a, b MessagesExportedChatInviteReplaced) bool) MessagesExportedChatInviteReplacedArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesExportedChatInviteReplaced.
func (s MessagesExportedChatInviteReplacedArray) SortStable(less func(a, b MessagesExportedChatInviteReplaced) bool) MessagesExportedChatInviteReplacedArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesExportedChatInviteReplaced.
func (s MessagesExportedChatInviteReplacedArray) Retain(keep func(x MessagesExportedChatInviteReplaced) bool) MessagesExportedChatInviteReplacedArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesExportedChatInviteReplacedArray) First() (v MessagesExportedChatInviteReplaced, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesExportedChatInviteReplacedArray) Last() (v MessagesExportedChatInviteReplaced, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesExportedChatInviteReplacedArray) PopFirst() (v MessagesExportedChatInviteReplaced, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesExportedChatInviteReplaced
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesExportedChatInviteReplacedArray) Pop() (v MessagesExportedChatInviteReplaced, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
