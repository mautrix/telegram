//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BotCommandScopeClassArray is adapter for slice of BotCommandScopeClass.
type BotCommandScopeClassArray []BotCommandScopeClass

// Sort sorts slice of BotCommandScopeClass.
func (s BotCommandScopeClassArray) Sort(less func(a, b BotCommandScopeClass) bool) BotCommandScopeClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of BotCommandScopeClass.
func (s BotCommandScopeClassArray) SortStable(less func(a, b BotCommandScopeClass) bool) BotCommandScopeClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of BotCommandScopeClass.
func (s BotCommandScopeClassArray) Retain(keep func(x BotCommandScopeClass) bool) BotCommandScopeClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s BotCommandScopeClassArray) First() (v BotCommandScopeClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s BotCommandScopeClassArray) Last() (v BotCommandScopeClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *BotCommandScopeClassArray) PopFirst() (v BotCommandScopeClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero BotCommandScopeClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *BotCommandScopeClassArray) Pop() (v BotCommandScopeClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsBotCommandScopePeer returns copy with only BotCommandScopePeer constructors.
func (s BotCommandScopeClassArray) AsBotCommandScopePeer() (to BotCommandScopePeerArray) {
	for _, elem := range s {
		value, ok := elem.(*BotCommandScopePeer)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsBotCommandScopePeerAdmins returns copy with only BotCommandScopePeerAdmins constructors.
func (s BotCommandScopeClassArray) AsBotCommandScopePeerAdmins() (to BotCommandScopePeerAdminsArray) {
	for _, elem := range s {
		value, ok := elem.(*BotCommandScopePeerAdmins)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsBotCommandScopePeerUser returns copy with only BotCommandScopePeerUser constructors.
func (s BotCommandScopeClassArray) AsBotCommandScopePeerUser() (to BotCommandScopePeerUserArray) {
	for _, elem := range s {
		value, ok := elem.(*BotCommandScopePeerUser)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// BotCommandScopePeerArray is adapter for slice of BotCommandScopePeer.
type BotCommandScopePeerArray []BotCommandScopePeer

// Sort sorts slice of BotCommandScopePeer.
func (s BotCommandScopePeerArray) Sort(less func(a, b BotCommandScopePeer) bool) BotCommandScopePeerArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of BotCommandScopePeer.
func (s BotCommandScopePeerArray) SortStable(less func(a, b BotCommandScopePeer) bool) BotCommandScopePeerArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of BotCommandScopePeer.
func (s BotCommandScopePeerArray) Retain(keep func(x BotCommandScopePeer) bool) BotCommandScopePeerArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s BotCommandScopePeerArray) First() (v BotCommandScopePeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s BotCommandScopePeerArray) Last() (v BotCommandScopePeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *BotCommandScopePeerArray) PopFirst() (v BotCommandScopePeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero BotCommandScopePeer
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *BotCommandScopePeerArray) Pop() (v BotCommandScopePeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// BotCommandScopePeerAdminsArray is adapter for slice of BotCommandScopePeerAdmins.
type BotCommandScopePeerAdminsArray []BotCommandScopePeerAdmins

// Sort sorts slice of BotCommandScopePeerAdmins.
func (s BotCommandScopePeerAdminsArray) Sort(less func(a, b BotCommandScopePeerAdmins) bool) BotCommandScopePeerAdminsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of BotCommandScopePeerAdmins.
func (s BotCommandScopePeerAdminsArray) SortStable(less func(a, b BotCommandScopePeerAdmins) bool) BotCommandScopePeerAdminsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of BotCommandScopePeerAdmins.
func (s BotCommandScopePeerAdminsArray) Retain(keep func(x BotCommandScopePeerAdmins) bool) BotCommandScopePeerAdminsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s BotCommandScopePeerAdminsArray) First() (v BotCommandScopePeerAdmins, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s BotCommandScopePeerAdminsArray) Last() (v BotCommandScopePeerAdmins, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *BotCommandScopePeerAdminsArray) PopFirst() (v BotCommandScopePeerAdmins, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero BotCommandScopePeerAdmins
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *BotCommandScopePeerAdminsArray) Pop() (v BotCommandScopePeerAdmins, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// BotCommandScopePeerUserArray is adapter for slice of BotCommandScopePeerUser.
type BotCommandScopePeerUserArray []BotCommandScopePeerUser

// Sort sorts slice of BotCommandScopePeerUser.
func (s BotCommandScopePeerUserArray) Sort(less func(a, b BotCommandScopePeerUser) bool) BotCommandScopePeerUserArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of BotCommandScopePeerUser.
func (s BotCommandScopePeerUserArray) SortStable(less func(a, b BotCommandScopePeerUser) bool) BotCommandScopePeerUserArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of BotCommandScopePeerUser.
func (s BotCommandScopePeerUserArray) Retain(keep func(x BotCommandScopePeerUser) bool) BotCommandScopePeerUserArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s BotCommandScopePeerUserArray) First() (v BotCommandScopePeerUser, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s BotCommandScopePeerUserArray) Last() (v BotCommandScopePeerUser, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *BotCommandScopePeerUserArray) PopFirst() (v BotCommandScopePeerUser, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero BotCommandScopePeerUser
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *BotCommandScopePeerUserArray) Pop() (v BotCommandScopePeerUser, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
