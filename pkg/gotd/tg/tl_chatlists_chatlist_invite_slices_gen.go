//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChatlistsChatlistInviteClassArray is adapter for slice of ChatlistsChatlistInviteClass.
type ChatlistsChatlistInviteClassArray []ChatlistsChatlistInviteClass

// Sort sorts slice of ChatlistsChatlistInviteClass.
func (s ChatlistsChatlistInviteClassArray) Sort(less func(a, b ChatlistsChatlistInviteClass) bool) ChatlistsChatlistInviteClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of ChatlistsChatlistInviteClass.
func (s ChatlistsChatlistInviteClassArray) SortStable(less func(a, b ChatlistsChatlistInviteClass) bool) ChatlistsChatlistInviteClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of ChatlistsChatlistInviteClass.
func (s ChatlistsChatlistInviteClassArray) Retain(keep func(x ChatlistsChatlistInviteClass) bool) ChatlistsChatlistInviteClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s ChatlistsChatlistInviteClassArray) First() (v ChatlistsChatlistInviteClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChatlistsChatlistInviteClassArray) Last() (v ChatlistsChatlistInviteClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChatlistsChatlistInviteClassArray) PopFirst() (v ChatlistsChatlistInviteClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero ChatlistsChatlistInviteClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChatlistsChatlistInviteClassArray) Pop() (v ChatlistsChatlistInviteClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsChatlistsChatlistInviteAlready returns copy with only ChatlistsChatlistInviteAlready constructors.
func (s ChatlistsChatlistInviteClassArray) AsChatlistsChatlistInviteAlready() (to ChatlistsChatlistInviteAlreadyArray) {
	for _, elem := range s {
		value, ok := elem.(*ChatlistsChatlistInviteAlready)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsChatlistsChatlistInvite returns copy with only ChatlistsChatlistInvite constructors.
func (s ChatlistsChatlistInviteClassArray) AsChatlistsChatlistInvite() (to ChatlistsChatlistInviteArray) {
	for _, elem := range s {
		value, ok := elem.(*ChatlistsChatlistInvite)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// ChatlistsChatlistInviteAlreadyArray is adapter for slice of ChatlistsChatlistInviteAlready.
type ChatlistsChatlistInviteAlreadyArray []ChatlistsChatlistInviteAlready

// Sort sorts slice of ChatlistsChatlistInviteAlready.
func (s ChatlistsChatlistInviteAlreadyArray) Sort(less func(a, b ChatlistsChatlistInviteAlready) bool) ChatlistsChatlistInviteAlreadyArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of ChatlistsChatlistInviteAlready.
func (s ChatlistsChatlistInviteAlreadyArray) SortStable(less func(a, b ChatlistsChatlistInviteAlready) bool) ChatlistsChatlistInviteAlreadyArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of ChatlistsChatlistInviteAlready.
func (s ChatlistsChatlistInviteAlreadyArray) Retain(keep func(x ChatlistsChatlistInviteAlready) bool) ChatlistsChatlistInviteAlreadyArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s ChatlistsChatlistInviteAlreadyArray) First() (v ChatlistsChatlistInviteAlready, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChatlistsChatlistInviteAlreadyArray) Last() (v ChatlistsChatlistInviteAlready, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChatlistsChatlistInviteAlreadyArray) PopFirst() (v ChatlistsChatlistInviteAlready, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero ChatlistsChatlistInviteAlready
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChatlistsChatlistInviteAlreadyArray) Pop() (v ChatlistsChatlistInviteAlready, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// ChatlistsChatlistInviteArray is adapter for slice of ChatlistsChatlistInvite.
type ChatlistsChatlistInviteArray []ChatlistsChatlistInvite

// Sort sorts slice of ChatlistsChatlistInvite.
func (s ChatlistsChatlistInviteArray) Sort(less func(a, b ChatlistsChatlistInvite) bool) ChatlistsChatlistInviteArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of ChatlistsChatlistInvite.
func (s ChatlistsChatlistInviteArray) SortStable(less func(a, b ChatlistsChatlistInvite) bool) ChatlistsChatlistInviteArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of ChatlistsChatlistInvite.
func (s ChatlistsChatlistInviteArray) Retain(keep func(x ChatlistsChatlistInvite) bool) ChatlistsChatlistInviteArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s ChatlistsChatlistInviteArray) First() (v ChatlistsChatlistInvite, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChatlistsChatlistInviteArray) Last() (v ChatlistsChatlistInvite, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChatlistsChatlistInviteArray) PopFirst() (v ChatlistsChatlistInvite, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero ChatlistsChatlistInvite
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChatlistsChatlistInviteArray) Pop() (v ChatlistsChatlistInvite, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
