//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// NotifyPeerClassArray is adapter for slice of NotifyPeerClass.
type NotifyPeerClassArray []NotifyPeerClass

// Sort sorts slice of NotifyPeerClass.
func (s NotifyPeerClassArray) Sort(less func(a, b NotifyPeerClass) bool) NotifyPeerClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of NotifyPeerClass.
func (s NotifyPeerClassArray) SortStable(less func(a, b NotifyPeerClass) bool) NotifyPeerClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of NotifyPeerClass.
func (s NotifyPeerClassArray) Retain(keep func(x NotifyPeerClass) bool) NotifyPeerClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s NotifyPeerClassArray) First() (v NotifyPeerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s NotifyPeerClassArray) Last() (v NotifyPeerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *NotifyPeerClassArray) PopFirst() (v NotifyPeerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero NotifyPeerClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *NotifyPeerClassArray) Pop() (v NotifyPeerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsNotifyPeer returns copy with only NotifyPeer constructors.
func (s NotifyPeerClassArray) AsNotifyPeer() (to NotifyPeerArray) {
	for _, elem := range s {
		value, ok := elem.(*NotifyPeer)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsNotifyForumTopic returns copy with only NotifyForumTopic constructors.
func (s NotifyPeerClassArray) AsNotifyForumTopic() (to NotifyForumTopicArray) {
	for _, elem := range s {
		value, ok := elem.(*NotifyForumTopic)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// NotifyPeerArray is adapter for slice of NotifyPeer.
type NotifyPeerArray []NotifyPeer

// Sort sorts slice of NotifyPeer.
func (s NotifyPeerArray) Sort(less func(a, b NotifyPeer) bool) NotifyPeerArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of NotifyPeer.
func (s NotifyPeerArray) SortStable(less func(a, b NotifyPeer) bool) NotifyPeerArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of NotifyPeer.
func (s NotifyPeerArray) Retain(keep func(x NotifyPeer) bool) NotifyPeerArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s NotifyPeerArray) First() (v NotifyPeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s NotifyPeerArray) Last() (v NotifyPeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *NotifyPeerArray) PopFirst() (v NotifyPeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero NotifyPeer
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *NotifyPeerArray) Pop() (v NotifyPeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// NotifyForumTopicArray is adapter for slice of NotifyForumTopic.
type NotifyForumTopicArray []NotifyForumTopic

// Sort sorts slice of NotifyForumTopic.
func (s NotifyForumTopicArray) Sort(less func(a, b NotifyForumTopic) bool) NotifyForumTopicArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of NotifyForumTopic.
func (s NotifyForumTopicArray) SortStable(less func(a, b NotifyForumTopic) bool) NotifyForumTopicArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of NotifyForumTopic.
func (s NotifyForumTopicArray) Retain(keep func(x NotifyForumTopic) bool) NotifyForumTopicArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s NotifyForumTopicArray) First() (v NotifyForumTopic, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s NotifyForumTopicArray) Last() (v NotifyForumTopic, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *NotifyForumTopicArray) PopFirst() (v NotifyForumTopic, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero NotifyForumTopic
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *NotifyForumTopicArray) Pop() (v NotifyForumTopic, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
