//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesAvailableEffectsClassArray is adapter for slice of MessagesAvailableEffectsClass.
type MessagesAvailableEffectsClassArray []MessagesAvailableEffectsClass

// Sort sorts slice of MessagesAvailableEffectsClass.
func (s MessagesAvailableEffectsClassArray) Sort(less func(a, b MessagesAvailableEffectsClass) bool) MessagesAvailableEffectsClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesAvailableEffectsClass.
func (s MessagesAvailableEffectsClassArray) SortStable(less func(a, b MessagesAvailableEffectsClass) bool) MessagesAvailableEffectsClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesAvailableEffectsClass.
func (s MessagesAvailableEffectsClassArray) Retain(keep func(x MessagesAvailableEffectsClass) bool) MessagesAvailableEffectsClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesAvailableEffectsClassArray) First() (v MessagesAvailableEffectsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesAvailableEffectsClassArray) Last() (v MessagesAvailableEffectsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesAvailableEffectsClassArray) PopFirst() (v MessagesAvailableEffectsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesAvailableEffectsClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesAvailableEffectsClassArray) Pop() (v MessagesAvailableEffectsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsMessagesAvailableEffects returns copy with only MessagesAvailableEffects constructors.
func (s MessagesAvailableEffectsClassArray) AsMessagesAvailableEffects() (to MessagesAvailableEffectsArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesAvailableEffects)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s MessagesAvailableEffectsClassArray) AppendOnlyModified(to []*MessagesAvailableEffects) []*MessagesAvailableEffects {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s MessagesAvailableEffectsClassArray) AsModified() (to []*MessagesAvailableEffects) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s MessagesAvailableEffectsClassArray) FirstAsModified() (v *MessagesAvailableEffects, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s MessagesAvailableEffectsClassArray) LastAsModified() (v *MessagesAvailableEffects, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *MessagesAvailableEffectsClassArray) PopFirstAsModified() (v *MessagesAvailableEffects, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *MessagesAvailableEffectsClassArray) PopAsModified() (v *MessagesAvailableEffects, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// MessagesAvailableEffectsArray is adapter for slice of MessagesAvailableEffects.
type MessagesAvailableEffectsArray []MessagesAvailableEffects

// Sort sorts slice of MessagesAvailableEffects.
func (s MessagesAvailableEffectsArray) Sort(less func(a, b MessagesAvailableEffects) bool) MessagesAvailableEffectsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesAvailableEffects.
func (s MessagesAvailableEffectsArray) SortStable(less func(a, b MessagesAvailableEffects) bool) MessagesAvailableEffectsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesAvailableEffects.
func (s MessagesAvailableEffectsArray) Retain(keep func(x MessagesAvailableEffects) bool) MessagesAvailableEffectsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesAvailableEffectsArray) First() (v MessagesAvailableEffects, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesAvailableEffectsArray) Last() (v MessagesAvailableEffects, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesAvailableEffectsArray) PopFirst() (v MessagesAvailableEffects, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesAvailableEffects
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesAvailableEffectsArray) Pop() (v MessagesAvailableEffects, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
