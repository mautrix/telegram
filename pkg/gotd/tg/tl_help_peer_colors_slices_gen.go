//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// HelpPeerColorsClassArray is adapter for slice of HelpPeerColorsClass.
type HelpPeerColorsClassArray []HelpPeerColorsClass

// Sort sorts slice of HelpPeerColorsClass.
func (s HelpPeerColorsClassArray) Sort(less func(a, b HelpPeerColorsClass) bool) HelpPeerColorsClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of HelpPeerColorsClass.
func (s HelpPeerColorsClassArray) SortStable(less func(a, b HelpPeerColorsClass) bool) HelpPeerColorsClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of HelpPeerColorsClass.
func (s HelpPeerColorsClassArray) Retain(keep func(x HelpPeerColorsClass) bool) HelpPeerColorsClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s HelpPeerColorsClassArray) First() (v HelpPeerColorsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s HelpPeerColorsClassArray) Last() (v HelpPeerColorsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *HelpPeerColorsClassArray) PopFirst() (v HelpPeerColorsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero HelpPeerColorsClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *HelpPeerColorsClassArray) Pop() (v HelpPeerColorsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsHelpPeerColors returns copy with only HelpPeerColors constructors.
func (s HelpPeerColorsClassArray) AsHelpPeerColors() (to HelpPeerColorsArray) {
	for _, elem := range s {
		value, ok := elem.(*HelpPeerColors)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s HelpPeerColorsClassArray) AppendOnlyModified(to []*HelpPeerColors) []*HelpPeerColors {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s HelpPeerColorsClassArray) AsModified() (to []*HelpPeerColors) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s HelpPeerColorsClassArray) FirstAsModified() (v *HelpPeerColors, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s HelpPeerColorsClassArray) LastAsModified() (v *HelpPeerColors, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *HelpPeerColorsClassArray) PopFirstAsModified() (v *HelpPeerColors, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *HelpPeerColorsClassArray) PopAsModified() (v *HelpPeerColors, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// HelpPeerColorsArray is adapter for slice of HelpPeerColors.
type HelpPeerColorsArray []HelpPeerColors

// Sort sorts slice of HelpPeerColors.
func (s HelpPeerColorsArray) Sort(less func(a, b HelpPeerColors) bool) HelpPeerColorsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of HelpPeerColors.
func (s HelpPeerColorsArray) SortStable(less func(a, b HelpPeerColors) bool) HelpPeerColorsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of HelpPeerColors.
func (s HelpPeerColorsArray) Retain(keep func(x HelpPeerColors) bool) HelpPeerColorsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s HelpPeerColorsArray) First() (v HelpPeerColors, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s HelpPeerColorsArray) Last() (v HelpPeerColors, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *HelpPeerColorsArray) PopFirst() (v HelpPeerColors, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero HelpPeerColors
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *HelpPeerColorsArray) Pop() (v HelpPeerColors, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
