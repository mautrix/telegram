//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesChatsClassArray is adapter for slice of MessagesChatsClass.
type MessagesChatsClassArray []MessagesChatsClass

// Sort sorts slice of MessagesChatsClass.
func (s MessagesChatsClassArray) Sort(less func(a, b MessagesChatsClass) bool) MessagesChatsClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesChatsClass.
func (s MessagesChatsClassArray) SortStable(less func(a, b MessagesChatsClass) bool) MessagesChatsClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesChatsClass.
func (s MessagesChatsClassArray) Retain(keep func(x MessagesChatsClass) bool) MessagesChatsClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesChatsClassArray) First() (v MessagesChatsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesChatsClassArray) Last() (v MessagesChatsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesChatsClassArray) PopFirst() (v MessagesChatsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesChatsClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesChatsClassArray) Pop() (v MessagesChatsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsMessagesChats returns copy with only MessagesChats constructors.
func (s MessagesChatsClassArray) AsMessagesChats() (to MessagesChatsArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesChats)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessagesChatsSlice returns copy with only MessagesChatsSlice constructors.
func (s MessagesChatsClassArray) AsMessagesChatsSlice() (to MessagesChatsSliceArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesChatsSlice)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// MessagesChatsArray is adapter for slice of MessagesChats.
type MessagesChatsArray []MessagesChats

// Sort sorts slice of MessagesChats.
func (s MessagesChatsArray) Sort(less func(a, b MessagesChats) bool) MessagesChatsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesChats.
func (s MessagesChatsArray) SortStable(less func(a, b MessagesChats) bool) MessagesChatsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesChats.
func (s MessagesChatsArray) Retain(keep func(x MessagesChats) bool) MessagesChatsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesChatsArray) First() (v MessagesChats, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesChatsArray) Last() (v MessagesChats, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesChatsArray) PopFirst() (v MessagesChats, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesChats
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesChatsArray) Pop() (v MessagesChats, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessagesChatsSliceArray is adapter for slice of MessagesChatsSlice.
type MessagesChatsSliceArray []MessagesChatsSlice

// Sort sorts slice of MessagesChatsSlice.
func (s MessagesChatsSliceArray) Sort(less func(a, b MessagesChatsSlice) bool) MessagesChatsSliceArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesChatsSlice.
func (s MessagesChatsSliceArray) SortStable(less func(a, b MessagesChatsSlice) bool) MessagesChatsSliceArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesChatsSlice.
func (s MessagesChatsSliceArray) Retain(keep func(x MessagesChatsSlice) bool) MessagesChatsSliceArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesChatsSliceArray) First() (v MessagesChatsSlice, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesChatsSliceArray) Last() (v MessagesChatsSlice, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesChatsSliceArray) PopFirst() (v MessagesChatsSlice, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesChatsSlice
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesChatsSliceArray) Pop() (v MessagesChatsSlice, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
