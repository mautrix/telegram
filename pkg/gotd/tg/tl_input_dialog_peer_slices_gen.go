//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// InputDialogPeerClassArray is adapter for slice of InputDialogPeerClass.
type InputDialogPeerClassArray []InputDialogPeerClass

// Sort sorts slice of InputDialogPeerClass.
func (s InputDialogPeerClassArray) Sort(less func(a, b InputDialogPeerClass) bool) InputDialogPeerClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputDialogPeerClass.
func (s InputDialogPeerClassArray) SortStable(less func(a, b InputDialogPeerClass) bool) InputDialogPeerClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputDialogPeerClass.
func (s InputDialogPeerClassArray) Retain(keep func(x InputDialogPeerClass) bool) InputDialogPeerClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputDialogPeerClassArray) First() (v InputDialogPeerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputDialogPeerClassArray) Last() (v InputDialogPeerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputDialogPeerClassArray) PopFirst() (v InputDialogPeerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputDialogPeerClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputDialogPeerClassArray) Pop() (v InputDialogPeerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsInputDialogPeer returns copy with only InputDialogPeer constructors.
func (s InputDialogPeerClassArray) AsInputDialogPeer() (to InputDialogPeerArray) {
	for _, elem := range s {
		value, ok := elem.(*InputDialogPeer)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsInputDialogPeerFolder returns copy with only InputDialogPeerFolder constructors.
func (s InputDialogPeerClassArray) AsInputDialogPeerFolder() (to InputDialogPeerFolderArray) {
	for _, elem := range s {
		value, ok := elem.(*InputDialogPeerFolder)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// InputDialogPeerArray is adapter for slice of InputDialogPeer.
type InputDialogPeerArray []InputDialogPeer

// Sort sorts slice of InputDialogPeer.
func (s InputDialogPeerArray) Sort(less func(a, b InputDialogPeer) bool) InputDialogPeerArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputDialogPeer.
func (s InputDialogPeerArray) SortStable(less func(a, b InputDialogPeer) bool) InputDialogPeerArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputDialogPeer.
func (s InputDialogPeerArray) Retain(keep func(x InputDialogPeer) bool) InputDialogPeerArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputDialogPeerArray) First() (v InputDialogPeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputDialogPeerArray) Last() (v InputDialogPeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputDialogPeerArray) PopFirst() (v InputDialogPeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputDialogPeer
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputDialogPeerArray) Pop() (v InputDialogPeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// InputDialogPeerFolderArray is adapter for slice of InputDialogPeerFolder.
type InputDialogPeerFolderArray []InputDialogPeerFolder

// Sort sorts slice of InputDialogPeerFolder.
func (s InputDialogPeerFolderArray) Sort(less func(a, b InputDialogPeerFolder) bool) InputDialogPeerFolderArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputDialogPeerFolder.
func (s InputDialogPeerFolderArray) SortStable(less func(a, b InputDialogPeerFolder) bool) InputDialogPeerFolderArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputDialogPeerFolder.
func (s InputDialogPeerFolderArray) Retain(keep func(x InputDialogPeerFolder) bool) InputDialogPeerFolderArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputDialogPeerFolderArray) First() (v InputDialogPeerFolder, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputDialogPeerFolderArray) Last() (v InputDialogPeerFolder, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputDialogPeerFolderArray) PopFirst() (v InputDialogPeerFolder, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputDialogPeerFolder
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputDialogPeerFolderArray) Pop() (v InputDialogPeerFolder, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
