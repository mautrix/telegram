//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// NotificationSoundClassArray is adapter for slice of NotificationSoundClass.
type NotificationSoundClassArray []NotificationSoundClass

// Sort sorts slice of NotificationSoundClass.
func (s NotificationSoundClassArray) Sort(less func(a, b NotificationSoundClass) bool) NotificationSoundClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of NotificationSoundClass.
func (s NotificationSoundClassArray) SortStable(less func(a, b NotificationSoundClass) bool) NotificationSoundClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of NotificationSoundClass.
func (s NotificationSoundClassArray) Retain(keep func(x NotificationSoundClass) bool) NotificationSoundClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s NotificationSoundClassArray) First() (v NotificationSoundClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s NotificationSoundClassArray) Last() (v NotificationSoundClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *NotificationSoundClassArray) PopFirst() (v NotificationSoundClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero NotificationSoundClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *NotificationSoundClassArray) Pop() (v NotificationSoundClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsNotificationSoundLocal returns copy with only NotificationSoundLocal constructors.
func (s NotificationSoundClassArray) AsNotificationSoundLocal() (to NotificationSoundLocalArray) {
	for _, elem := range s {
		value, ok := elem.(*NotificationSoundLocal)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsNotificationSoundRingtone returns copy with only NotificationSoundRingtone constructors.
func (s NotificationSoundClassArray) AsNotificationSoundRingtone() (to NotificationSoundRingtoneArray) {
	for _, elem := range s {
		value, ok := elem.(*NotificationSoundRingtone)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// NotificationSoundLocalArray is adapter for slice of NotificationSoundLocal.
type NotificationSoundLocalArray []NotificationSoundLocal

// Sort sorts slice of NotificationSoundLocal.
func (s NotificationSoundLocalArray) Sort(less func(a, b NotificationSoundLocal) bool) NotificationSoundLocalArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of NotificationSoundLocal.
func (s NotificationSoundLocalArray) SortStable(less func(a, b NotificationSoundLocal) bool) NotificationSoundLocalArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of NotificationSoundLocal.
func (s NotificationSoundLocalArray) Retain(keep func(x NotificationSoundLocal) bool) NotificationSoundLocalArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s NotificationSoundLocalArray) First() (v NotificationSoundLocal, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s NotificationSoundLocalArray) Last() (v NotificationSoundLocal, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *NotificationSoundLocalArray) PopFirst() (v NotificationSoundLocal, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero NotificationSoundLocal
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *NotificationSoundLocalArray) Pop() (v NotificationSoundLocal, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// NotificationSoundRingtoneArray is adapter for slice of NotificationSoundRingtone.
type NotificationSoundRingtoneArray []NotificationSoundRingtone

// Sort sorts slice of NotificationSoundRingtone.
func (s NotificationSoundRingtoneArray) Sort(less func(a, b NotificationSoundRingtone) bool) NotificationSoundRingtoneArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of NotificationSoundRingtone.
func (s NotificationSoundRingtoneArray) SortStable(less func(a, b NotificationSoundRingtone) bool) NotificationSoundRingtoneArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of NotificationSoundRingtone.
func (s NotificationSoundRingtoneArray) Retain(keep func(x NotificationSoundRingtone) bool) NotificationSoundRingtoneArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s NotificationSoundRingtoneArray) First() (v NotificationSoundRingtone, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s NotificationSoundRingtoneArray) Last() (v NotificationSoundRingtone, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *NotificationSoundRingtoneArray) PopFirst() (v NotificationSoundRingtone, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero NotificationSoundRingtone
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *NotificationSoundRingtoneArray) Pop() (v NotificationSoundRingtone, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SortByID sorts slice of NotificationSoundRingtone by ID.
func (s NotificationSoundRingtoneArray) SortByID() NotificationSoundRingtoneArray {
	return s.Sort(func(a, b NotificationSoundRingtone) bool {
		return a.GetID() < b.GetID()
	})
}

// SortStableByID sorts slice of NotificationSoundRingtone by ID.
func (s NotificationSoundRingtoneArray) SortStableByID() NotificationSoundRingtoneArray {
	return s.SortStable(func(a, b NotificationSoundRingtone) bool {
		return a.GetID() < b.GetID()
	})
}

// FillMap fills constructors to given map.
func (s NotificationSoundRingtoneArray) FillMap(to map[int64]NotificationSoundRingtone) {
	for _, value := range s {
		to[value.GetID()] = value
	}
}

// ToMap collects constructors to map.
func (s NotificationSoundRingtoneArray) ToMap() map[int64]NotificationSoundRingtone {
	r := make(map[int64]NotificationSoundRingtone, len(s))
	s.FillMap(r)
	return r
}
