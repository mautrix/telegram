//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// InputNotifyPeerClassArray is adapter for slice of InputNotifyPeerClass.
type InputNotifyPeerClassArray []InputNotifyPeerClass

// Sort sorts slice of InputNotifyPeerClass.
func (s InputNotifyPeerClassArray) Sort(less func(a, b InputNotifyPeerClass) bool) InputNotifyPeerClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputNotifyPeerClass.
func (s InputNotifyPeerClassArray) SortStable(less func(a, b InputNotifyPeerClass) bool) InputNotifyPeerClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputNotifyPeerClass.
func (s InputNotifyPeerClassArray) Retain(keep func(x InputNotifyPeerClass) bool) InputNotifyPeerClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputNotifyPeerClassArray) First() (v InputNotifyPeerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputNotifyPeerClassArray) Last() (v InputNotifyPeerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputNotifyPeerClassArray) PopFirst() (v InputNotifyPeerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputNotifyPeerClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputNotifyPeerClassArray) Pop() (v InputNotifyPeerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsInputNotifyPeer returns copy with only InputNotifyPeer constructors.
func (s InputNotifyPeerClassArray) AsInputNotifyPeer() (to InputNotifyPeerArray) {
	for _, elem := range s {
		value, ok := elem.(*InputNotifyPeer)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsInputNotifyForumTopic returns copy with only InputNotifyForumTopic constructors.
func (s InputNotifyPeerClassArray) AsInputNotifyForumTopic() (to InputNotifyForumTopicArray) {
	for _, elem := range s {
		value, ok := elem.(*InputNotifyForumTopic)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// InputNotifyPeerArray is adapter for slice of InputNotifyPeer.
type InputNotifyPeerArray []InputNotifyPeer

// Sort sorts slice of InputNotifyPeer.
func (s InputNotifyPeerArray) Sort(less func(a, b InputNotifyPeer) bool) InputNotifyPeerArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputNotifyPeer.
func (s InputNotifyPeerArray) SortStable(less func(a, b InputNotifyPeer) bool) InputNotifyPeerArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputNotifyPeer.
func (s InputNotifyPeerArray) Retain(keep func(x InputNotifyPeer) bool) InputNotifyPeerArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputNotifyPeerArray) First() (v InputNotifyPeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputNotifyPeerArray) Last() (v InputNotifyPeer, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputNotifyPeerArray) PopFirst() (v InputNotifyPeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputNotifyPeer
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputNotifyPeerArray) Pop() (v InputNotifyPeer, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// InputNotifyForumTopicArray is adapter for slice of InputNotifyForumTopic.
type InputNotifyForumTopicArray []InputNotifyForumTopic

// Sort sorts slice of InputNotifyForumTopic.
func (s InputNotifyForumTopicArray) Sort(less func(a, b InputNotifyForumTopic) bool) InputNotifyForumTopicArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputNotifyForumTopic.
func (s InputNotifyForumTopicArray) SortStable(less func(a, b InputNotifyForumTopic) bool) InputNotifyForumTopicArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputNotifyForumTopic.
func (s InputNotifyForumTopicArray) Retain(keep func(x InputNotifyForumTopic) bool) InputNotifyForumTopicArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputNotifyForumTopicArray) First() (v InputNotifyForumTopic, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputNotifyForumTopicArray) Last() (v InputNotifyForumTopic, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputNotifyForumTopicArray) PopFirst() (v InputNotifyForumTopic, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputNotifyForumTopic
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputNotifyForumTopicArray) Pop() (v InputNotifyForumTopic, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
