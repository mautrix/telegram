// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesGetCustomEmojiDocumentsRequest represents TL type `messages.getCustomEmojiDocuments#d9ab0f54`.
// Fetch custom emoji stickers »¹.
// Returns a list of documents¹ with the animated custom emoji in TGS format, and a
// documentAttributeCustomEmoji² attribute with the original emoji and info about the
// emoji stickerset this custom emoji belongs to.
//
// Links:
//  1. https://core.telegram.org/api/custom-emoji
//  2. https://core.telegram.org/constructor/document
//  3. https://core.telegram.org/constructor/documentAttributeCustomEmoji
//
// See https://core.telegram.org/method/messages.getCustomEmojiDocuments for reference.
type MessagesGetCustomEmojiDocumentsRequest struct {
	// Custom emoji¹ IDs from a messageEntityCustomEmoji².
	//
	// Links:
	//  1) https://core.telegram.org/api/custom-emoji
	//  2) https://core.telegram.org/constructor/messageEntityCustomEmoji
	DocumentID []int64
}

// MessagesGetCustomEmojiDocumentsRequestTypeID is TL type id of MessagesGetCustomEmojiDocumentsRequest.
const MessagesGetCustomEmojiDocumentsRequestTypeID = 0xd9ab0f54

// Ensuring interfaces in compile-time for MessagesGetCustomEmojiDocumentsRequest.
var (
	_ bin.Encoder     = &MessagesGetCustomEmojiDocumentsRequest{}
	_ bin.Decoder     = &MessagesGetCustomEmojiDocumentsRequest{}
	_ bin.BareEncoder = &MessagesGetCustomEmojiDocumentsRequest{}
	_ bin.BareDecoder = &MessagesGetCustomEmojiDocumentsRequest{}
)

func (g *MessagesGetCustomEmojiDocumentsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.DocumentID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *MessagesGetCustomEmojiDocumentsRequest) String() string {
	if g == nil {
		return "MessagesGetCustomEmojiDocumentsRequest(nil)"
	}
	type Alias MessagesGetCustomEmojiDocumentsRequest
	return fmt.Sprintf("MessagesGetCustomEmojiDocumentsRequest%+v", Alias(*g))
}

// FillFrom fills MessagesGetCustomEmojiDocumentsRequest from given interface.
func (g *MessagesGetCustomEmojiDocumentsRequest) FillFrom(from interface {
	GetDocumentID() (value []int64)
}) {
	g.DocumentID = from.GetDocumentID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesGetCustomEmojiDocumentsRequest) TypeID() uint32 {
	return MessagesGetCustomEmojiDocumentsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesGetCustomEmojiDocumentsRequest) TypeName() string {
	return "messages.getCustomEmojiDocuments"
}

// TypeInfo returns info about TL type.
func (g *MessagesGetCustomEmojiDocumentsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.getCustomEmojiDocuments",
		ID:   MessagesGetCustomEmojiDocumentsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "DocumentID",
			SchemaName: "document_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *MessagesGetCustomEmojiDocumentsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getCustomEmojiDocuments#d9ab0f54 as nil")
	}
	b.PutID(MessagesGetCustomEmojiDocumentsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *MessagesGetCustomEmojiDocumentsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getCustomEmojiDocuments#d9ab0f54 as nil")
	}
	b.PutVectorHeader(len(g.DocumentID))
	for _, v := range g.DocumentID {
		b.PutLong(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetCustomEmojiDocumentsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getCustomEmojiDocuments#d9ab0f54 to nil")
	}
	if err := b.ConsumeID(MessagesGetCustomEmojiDocumentsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getCustomEmojiDocuments#d9ab0f54: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *MessagesGetCustomEmojiDocumentsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getCustomEmojiDocuments#d9ab0f54 to nil")
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getCustomEmojiDocuments#d9ab0f54: field document_id: %w", err)
		}

		if headerLen > 0 {
			g.DocumentID = make([]int64, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode messages.getCustomEmojiDocuments#d9ab0f54: field document_id: %w", err)
			}
			g.DocumentID = append(g.DocumentID, value)
		}
	}
	return nil
}

// GetDocumentID returns value of DocumentID field.
func (g *MessagesGetCustomEmojiDocumentsRequest) GetDocumentID() (value []int64) {
	if g == nil {
		return
	}
	return g.DocumentID
}

// MessagesGetCustomEmojiDocuments invokes method messages.getCustomEmojiDocuments#d9ab0f54 returning error if any.
// Fetch custom emoji stickers »¹.
// Returns a list of documents¹ with the animated custom emoji in TGS format, and a
// documentAttributeCustomEmoji² attribute with the original emoji and info about the
// emoji stickerset this custom emoji belongs to.
//
// Links:
//  1. https://core.telegram.org/api/custom-emoji
//  2. https://core.telegram.org/constructor/document
//  3. https://core.telegram.org/constructor/documentAttributeCustomEmoji
//
// See https://core.telegram.org/method/messages.getCustomEmojiDocuments for reference.
// Can be used by bots.
func (c *Client) MessagesGetCustomEmojiDocuments(ctx context.Context, documentid []int64) ([]DocumentClass, error) {
	var result DocumentClassVector

	request := &MessagesGetCustomEmojiDocumentsRequest{
		DocumentID: documentid,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return []DocumentClass(result.Elems), nil
}
