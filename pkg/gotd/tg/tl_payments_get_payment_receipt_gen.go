// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsGetPaymentReceiptRequest represents TL type `payments.getPaymentReceipt#2478d1cc`.
// Get payment receipt
//
// See https://core.telegram.org/method/payments.getPaymentReceipt for reference.
type PaymentsGetPaymentReceiptRequest struct {
	// The peer where the payment receipt was sent
	Peer InputPeerClass
	// Message ID of receipt
	MsgID int
}

// PaymentsGetPaymentReceiptRequestTypeID is TL type id of PaymentsGetPaymentReceiptRequest.
const PaymentsGetPaymentReceiptRequestTypeID = 0x2478d1cc

// Ensuring interfaces in compile-time for PaymentsGetPaymentReceiptRequest.
var (
	_ bin.Encoder     = &PaymentsGetPaymentReceiptRequest{}
	_ bin.Decoder     = &PaymentsGetPaymentReceiptRequest{}
	_ bin.BareEncoder = &PaymentsGetPaymentReceiptRequest{}
	_ bin.BareDecoder = &PaymentsGetPaymentReceiptRequest{}
)

func (g *PaymentsGetPaymentReceiptRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Peer == nil) {
		return false
	}
	if !(g.MsgID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *PaymentsGetPaymentReceiptRequest) String() string {
	if g == nil {
		return "PaymentsGetPaymentReceiptRequest(nil)"
	}
	type Alias PaymentsGetPaymentReceiptRequest
	return fmt.Sprintf("PaymentsGetPaymentReceiptRequest%+v", Alias(*g))
}

// FillFrom fills PaymentsGetPaymentReceiptRequest from given interface.
func (g *PaymentsGetPaymentReceiptRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetMsgID() (value int)
}) {
	g.Peer = from.GetPeer()
	g.MsgID = from.GetMsgID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsGetPaymentReceiptRequest) TypeID() uint32 {
	return PaymentsGetPaymentReceiptRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsGetPaymentReceiptRequest) TypeName() string {
	return "payments.getPaymentReceipt"
}

// TypeInfo returns info about TL type.
func (g *PaymentsGetPaymentReceiptRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.getPaymentReceipt",
		ID:   PaymentsGetPaymentReceiptRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "MsgID",
			SchemaName: "msg_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *PaymentsGetPaymentReceiptRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode payments.getPaymentReceipt#2478d1cc as nil")
	}
	b.PutID(PaymentsGetPaymentReceiptRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *PaymentsGetPaymentReceiptRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode payments.getPaymentReceipt#2478d1cc as nil")
	}
	if g.Peer == nil {
		return fmt.Errorf("unable to encode payments.getPaymentReceipt#2478d1cc: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.getPaymentReceipt#2478d1cc: field peer: %w", err)
	}
	b.PutInt(g.MsgID)
	return nil
}

// Decode implements bin.Decoder.
func (g *PaymentsGetPaymentReceiptRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode payments.getPaymentReceipt#2478d1cc to nil")
	}
	if err := b.ConsumeID(PaymentsGetPaymentReceiptRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.getPaymentReceipt#2478d1cc: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *PaymentsGetPaymentReceiptRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode payments.getPaymentReceipt#2478d1cc to nil")
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode payments.getPaymentReceipt#2478d1cc: field peer: %w", err)
		}
		g.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode payments.getPaymentReceipt#2478d1cc: field msg_id: %w", err)
		}
		g.MsgID = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (g *PaymentsGetPaymentReceiptRequest) GetPeer() (value InputPeerClass) {
	if g == nil {
		return
	}
	return g.Peer
}

// GetMsgID returns value of MsgID field.
func (g *PaymentsGetPaymentReceiptRequest) GetMsgID() (value int) {
	if g == nil {
		return
	}
	return g.MsgID
}

// PaymentsGetPaymentReceipt invokes method payments.getPaymentReceipt#2478d1cc returning error if any.
// Get payment receipt
//
// Possible errors:
//
//	400 MESSAGE_ID_INVALID: The provided message id is invalid.
//
// See https://core.telegram.org/method/payments.getPaymentReceipt for reference.
func (c *Client) PaymentsGetPaymentReceipt(ctx context.Context, request *PaymentsGetPaymentReceiptRequest) (PaymentsPaymentReceiptClass, error) {
	var result PaymentsPaymentReceiptBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.PaymentReceipt, nil
}
