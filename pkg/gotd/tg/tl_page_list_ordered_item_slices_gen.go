//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PageListOrderedItemClassArray is adapter for slice of PageListOrderedItemClass.
type PageListOrderedItemClassArray []PageListOrderedItemClass

// Sort sorts slice of PageListOrderedItemClass.
func (s PageListOrderedItemClassArray) Sort(less func(a, b PageListOrderedItemClass) bool) PageListOrderedItemClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PageListOrderedItemClass.
func (s PageListOrderedItemClassArray) SortStable(less func(a, b PageListOrderedItemClass) bool) PageListOrderedItemClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PageListOrderedItemClass.
func (s PageListOrderedItemClassArray) Retain(keep func(x PageListOrderedItemClass) bool) PageListOrderedItemClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PageListOrderedItemClassArray) First() (v PageListOrderedItemClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PageListOrderedItemClassArray) Last() (v PageListOrderedItemClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PageListOrderedItemClassArray) PopFirst() (v PageListOrderedItemClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PageListOrderedItemClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PageListOrderedItemClassArray) Pop() (v PageListOrderedItemClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsPageListOrderedItemText returns copy with only PageListOrderedItemText constructors.
func (s PageListOrderedItemClassArray) AsPageListOrderedItemText() (to PageListOrderedItemTextArray) {
	for _, elem := range s {
		value, ok := elem.(*PageListOrderedItemText)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsPageListOrderedItemBlocks returns copy with only PageListOrderedItemBlocks constructors.
func (s PageListOrderedItemClassArray) AsPageListOrderedItemBlocks() (to PageListOrderedItemBlocksArray) {
	for _, elem := range s {
		value, ok := elem.(*PageListOrderedItemBlocks)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// PageListOrderedItemTextArray is adapter for slice of PageListOrderedItemText.
type PageListOrderedItemTextArray []PageListOrderedItemText

// Sort sorts slice of PageListOrderedItemText.
func (s PageListOrderedItemTextArray) Sort(less func(a, b PageListOrderedItemText) bool) PageListOrderedItemTextArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PageListOrderedItemText.
func (s PageListOrderedItemTextArray) SortStable(less func(a, b PageListOrderedItemText) bool) PageListOrderedItemTextArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PageListOrderedItemText.
func (s PageListOrderedItemTextArray) Retain(keep func(x PageListOrderedItemText) bool) PageListOrderedItemTextArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PageListOrderedItemTextArray) First() (v PageListOrderedItemText, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PageListOrderedItemTextArray) Last() (v PageListOrderedItemText, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PageListOrderedItemTextArray) PopFirst() (v PageListOrderedItemText, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PageListOrderedItemText
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PageListOrderedItemTextArray) Pop() (v PageListOrderedItemText, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// PageListOrderedItemBlocksArray is adapter for slice of PageListOrderedItemBlocks.
type PageListOrderedItemBlocksArray []PageListOrderedItemBlocks

// Sort sorts slice of PageListOrderedItemBlocks.
func (s PageListOrderedItemBlocksArray) Sort(less func(a, b PageListOrderedItemBlocks) bool) PageListOrderedItemBlocksArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PageListOrderedItemBlocks.
func (s PageListOrderedItemBlocksArray) SortStable(less func(a, b PageListOrderedItemBlocks) bool) PageListOrderedItemBlocksArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PageListOrderedItemBlocks.
func (s PageListOrderedItemBlocksArray) Retain(keep func(x PageListOrderedItemBlocks) bool) PageListOrderedItemBlocksArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PageListOrderedItemBlocksArray) First() (v PageListOrderedItemBlocks, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PageListOrderedItemBlocksArray) Last() (v PageListOrderedItemBlocks, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PageListOrderedItemBlocksArray) PopFirst() (v PageListOrderedItemBlocks, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PageListOrderedItemBlocks
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PageListOrderedItemBlocksArray) Pop() (v PageListOrderedItemBlocks, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
