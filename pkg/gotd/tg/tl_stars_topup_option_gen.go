// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StarsTopupOption represents TL type `starsTopupOption#bd915c0`.
// Telegram Stars topup option¹.
//
// Links:
//  1. https://core.telegram.org/api/stars
//
// See https://core.telegram.org/constructor/starsTopupOption for reference.
type StarsTopupOption struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// If set, the option must only be shown in the full list of topup options.
	Extended bool
	// Amount of Telegram stars.
	Stars int64
	// Identifier of the store product associated with the option, official apps only.
	//
	// Use SetStoreProduct and GetStoreProduct helpers.
	StoreProduct string
	// Three-letter ISO 4217 currency¹ code
	//
	// Links:
	//  1) https://core.telegram.org/bots/payments#supported-currencies
	Currency string
	// Price of the product in the smallest units of the currency (integer, not float/double)
	// For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in
	// currencies.json¹, it shows the number of digits past the decimal point for each
	// currency (2 for the majority of currencies).
	//
	// Links:
	//  1) https://core.telegram.org/bots/payments/currencies.json
	Amount int64
}

// StarsTopupOptionTypeID is TL type id of StarsTopupOption.
const StarsTopupOptionTypeID = 0xbd915c0

// Ensuring interfaces in compile-time for StarsTopupOption.
var (
	_ bin.Encoder     = &StarsTopupOption{}
	_ bin.Decoder     = &StarsTopupOption{}
	_ bin.BareEncoder = &StarsTopupOption{}
	_ bin.BareDecoder = &StarsTopupOption{}
)

func (s *StarsTopupOption) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.Extended == false) {
		return false
	}
	if !(s.Stars == 0) {
		return false
	}
	if !(s.StoreProduct == "") {
		return false
	}
	if !(s.Currency == "") {
		return false
	}
	if !(s.Amount == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarsTopupOption) String() string {
	if s == nil {
		return "StarsTopupOption(nil)"
	}
	type Alias StarsTopupOption
	return fmt.Sprintf("StarsTopupOption%+v", Alias(*s))
}

// FillFrom fills StarsTopupOption from given interface.
func (s *StarsTopupOption) FillFrom(from interface {
	GetExtended() (value bool)
	GetStars() (value int64)
	GetStoreProduct() (value string, ok bool)
	GetCurrency() (value string)
	GetAmount() (value int64)
}) {
	s.Extended = from.GetExtended()
	s.Stars = from.GetStars()
	if val, ok := from.GetStoreProduct(); ok {
		s.StoreProduct = val
	}

	s.Currency = from.GetCurrency()
	s.Amount = from.GetAmount()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarsTopupOption) TypeID() uint32 {
	return StarsTopupOptionTypeID
}

// TypeName returns name of type in TL schema.
func (*StarsTopupOption) TypeName() string {
	return "starsTopupOption"
}

// TypeInfo returns info about TL type.
func (s *StarsTopupOption) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starsTopupOption",
		ID:   StarsTopupOptionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Extended",
			SchemaName: "extended",
			Null:       !s.Flags.Has(1),
		},
		{
			Name:       "Stars",
			SchemaName: "stars",
		},
		{
			Name:       "StoreProduct",
			SchemaName: "store_product",
			Null:       !s.Flags.Has(0),
		},
		{
			Name:       "Currency",
			SchemaName: "currency",
		},
		{
			Name:       "Amount",
			SchemaName: "amount",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *StarsTopupOption) SetFlags() {
	if !(s.Extended == false) {
		s.Flags.Set(1)
	}
	if !(s.StoreProduct == "") {
		s.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (s *StarsTopupOption) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starsTopupOption#bd915c0 as nil")
	}
	b.PutID(StarsTopupOptionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarsTopupOption) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starsTopupOption#bd915c0 as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starsTopupOption#bd915c0: field flags: %w", err)
	}
	b.PutLong(s.Stars)
	if s.Flags.Has(0) {
		b.PutString(s.StoreProduct)
	}
	b.PutString(s.Currency)
	b.PutLong(s.Amount)
	return nil
}

// Decode implements bin.Decoder.
func (s *StarsTopupOption) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starsTopupOption#bd915c0 to nil")
	}
	if err := b.ConsumeID(StarsTopupOptionTypeID); err != nil {
		return fmt.Errorf("unable to decode starsTopupOption#bd915c0: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarsTopupOption) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starsTopupOption#bd915c0 to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode starsTopupOption#bd915c0: field flags: %w", err)
		}
	}
	s.Extended = s.Flags.Has(1)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode starsTopupOption#bd915c0: field stars: %w", err)
		}
		s.Stars = value
	}
	if s.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsTopupOption#bd915c0: field store_product: %w", err)
		}
		s.StoreProduct = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsTopupOption#bd915c0: field currency: %w", err)
		}
		s.Currency = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode starsTopupOption#bd915c0: field amount: %w", err)
		}
		s.Amount = value
	}
	return nil
}

// SetExtended sets value of Extended conditional field.
func (s *StarsTopupOption) SetExtended(value bool) {
	if value {
		s.Flags.Set(1)
		s.Extended = true
	} else {
		s.Flags.Unset(1)
		s.Extended = false
	}
}

// GetExtended returns value of Extended conditional field.
func (s *StarsTopupOption) GetExtended() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(1)
}

// GetStars returns value of Stars field.
func (s *StarsTopupOption) GetStars() (value int64) {
	if s == nil {
		return
	}
	return s.Stars
}

// SetStoreProduct sets value of StoreProduct conditional field.
func (s *StarsTopupOption) SetStoreProduct(value string) {
	s.Flags.Set(0)
	s.StoreProduct = value
}

// GetStoreProduct returns value of StoreProduct conditional field and
// boolean which is true if field was set.
func (s *StarsTopupOption) GetStoreProduct() (value string, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.StoreProduct, true
}

// GetCurrency returns value of Currency field.
func (s *StarsTopupOption) GetCurrency() (value string) {
	if s == nil {
		return
	}
	return s.Currency
}

// GetAmount returns value of Amount field.
func (s *StarsTopupOption) GetAmount() (value int64) {
	if s == nil {
		return
	}
	return s.Amount
}
