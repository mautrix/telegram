// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BotsSetBotGroupDefaultAdminRightsRequest represents TL type `bots.setBotGroupDefaultAdminRights#925ec9ea`.
// Set the default suggested admin rights¹ for bots being added as admins to groups, see
// here for more info on how to handle them »².
//
// Links:
//  1. https://core.telegram.org/api/rights#suggested-bot-rights
//  2. https://core.telegram.org/api/rights#suggested-bot-rights
//
// See https://core.telegram.org/method/bots.setBotGroupDefaultAdminRights for reference.
type BotsSetBotGroupDefaultAdminRightsRequest struct {
	// Admin rights
	AdminRights ChatAdminRights
}

// BotsSetBotGroupDefaultAdminRightsRequestTypeID is TL type id of BotsSetBotGroupDefaultAdminRightsRequest.
const BotsSetBotGroupDefaultAdminRightsRequestTypeID = 0x925ec9ea

// Ensuring interfaces in compile-time for BotsSetBotGroupDefaultAdminRightsRequest.
var (
	_ bin.Encoder     = &BotsSetBotGroupDefaultAdminRightsRequest{}
	_ bin.Decoder     = &BotsSetBotGroupDefaultAdminRightsRequest{}
	_ bin.BareEncoder = &BotsSetBotGroupDefaultAdminRightsRequest{}
	_ bin.BareDecoder = &BotsSetBotGroupDefaultAdminRightsRequest{}
)

func (s *BotsSetBotGroupDefaultAdminRightsRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.AdminRights.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) String() string {
	if s == nil {
		return "BotsSetBotGroupDefaultAdminRightsRequest(nil)"
	}
	type Alias BotsSetBotGroupDefaultAdminRightsRequest
	return fmt.Sprintf("BotsSetBotGroupDefaultAdminRightsRequest%+v", Alias(*s))
}

// FillFrom fills BotsSetBotGroupDefaultAdminRightsRequest from given interface.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) FillFrom(from interface {
	GetAdminRights() (value ChatAdminRights)
}) {
	s.AdminRights = from.GetAdminRights()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotsSetBotGroupDefaultAdminRightsRequest) TypeID() uint32 {
	return BotsSetBotGroupDefaultAdminRightsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*BotsSetBotGroupDefaultAdminRightsRequest) TypeName() string {
	return "bots.setBotGroupDefaultAdminRights"
}

// TypeInfo returns info about TL type.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "bots.setBotGroupDefaultAdminRights",
		ID:   BotsSetBotGroupDefaultAdminRightsRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "AdminRights",
			SchemaName: "admin_rights",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotGroupDefaultAdminRights#925ec9ea as nil")
	}
	b.PutID(BotsSetBotGroupDefaultAdminRightsRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotGroupDefaultAdminRights#925ec9ea as nil")
	}
	if err := s.AdminRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode bots.setBotGroupDefaultAdminRights#925ec9ea: field admin_rights: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotGroupDefaultAdminRights#925ec9ea to nil")
	}
	if err := b.ConsumeID(BotsSetBotGroupDefaultAdminRightsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode bots.setBotGroupDefaultAdminRights#925ec9ea: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotGroupDefaultAdminRights#925ec9ea to nil")
	}
	{
		if err := s.AdminRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode bots.setBotGroupDefaultAdminRights#925ec9ea: field admin_rights: %w", err)
		}
	}
	return nil
}

// GetAdminRights returns value of AdminRights field.
func (s *BotsSetBotGroupDefaultAdminRightsRequest) GetAdminRights() (value ChatAdminRights) {
	if s == nil {
		return
	}
	return s.AdminRights
}

// BotsSetBotGroupDefaultAdminRights invokes method bots.setBotGroupDefaultAdminRights#925ec9ea returning error if any.
// Set the default suggested admin rights¹ for bots being added as admins to groups, see
// here for more info on how to handle them »².
//
// Links:
//  1. https://core.telegram.org/api/rights#suggested-bot-rights
//  2. https://core.telegram.org/api/rights#suggested-bot-rights
//
// Possible errors:
//
//	400 RIGHTS_NOT_MODIFIED: The new admin rights are equal to the old rights, no change was made.
//	400 USER_BOT_REQUIRED: This method can only be called by a bot.
//
// See https://core.telegram.org/method/bots.setBotGroupDefaultAdminRights for reference.
// Can be used by bots.
func (c *Client) BotsSetBotGroupDefaultAdminRights(ctx context.Context, adminrights ChatAdminRights) (bool, error) {
	var result BoolBox

	request := &BotsSetBotGroupDefaultAdminRightsRequest{
		AdminRights: adminrights,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
