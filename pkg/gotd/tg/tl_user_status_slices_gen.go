//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// UserStatusClassArray is adapter for slice of UserStatusClass.
type UserStatusClassArray []UserStatusClass

// Sort sorts slice of UserStatusClass.
func (s UserStatusClassArray) Sort(less func(a, b UserStatusClass) bool) UserStatusClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of UserStatusClass.
func (s UserStatusClassArray) SortStable(less func(a, b UserStatusClass) bool) UserStatusClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of UserStatusClass.
func (s UserStatusClassArray) Retain(keep func(x UserStatusClass) bool) UserStatusClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s UserStatusClassArray) First() (v UserStatusClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s UserStatusClassArray) Last() (v UserStatusClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *UserStatusClassArray) PopFirst() (v UserStatusClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero UserStatusClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *UserStatusClassArray) Pop() (v UserStatusClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsUserStatusOnline returns copy with only UserStatusOnline constructors.
func (s UserStatusClassArray) AsUserStatusOnline() (to UserStatusOnlineArray) {
	for _, elem := range s {
		value, ok := elem.(*UserStatusOnline)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsUserStatusOffline returns copy with only UserStatusOffline constructors.
func (s UserStatusClassArray) AsUserStatusOffline() (to UserStatusOfflineArray) {
	for _, elem := range s {
		value, ok := elem.(*UserStatusOffline)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsUserStatusRecently returns copy with only UserStatusRecently constructors.
func (s UserStatusClassArray) AsUserStatusRecently() (to UserStatusRecentlyArray) {
	for _, elem := range s {
		value, ok := elem.(*UserStatusRecently)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsUserStatusLastWeek returns copy with only UserStatusLastWeek constructors.
func (s UserStatusClassArray) AsUserStatusLastWeek() (to UserStatusLastWeekArray) {
	for _, elem := range s {
		value, ok := elem.(*UserStatusLastWeek)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsUserStatusLastMonth returns copy with only UserStatusLastMonth constructors.
func (s UserStatusClassArray) AsUserStatusLastMonth() (to UserStatusLastMonthArray) {
	for _, elem := range s {
		value, ok := elem.(*UserStatusLastMonth)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// UserStatusOnlineArray is adapter for slice of UserStatusOnline.
type UserStatusOnlineArray []UserStatusOnline

// Sort sorts slice of UserStatusOnline.
func (s UserStatusOnlineArray) Sort(less func(a, b UserStatusOnline) bool) UserStatusOnlineArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of UserStatusOnline.
func (s UserStatusOnlineArray) SortStable(less func(a, b UserStatusOnline) bool) UserStatusOnlineArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of UserStatusOnline.
func (s UserStatusOnlineArray) Retain(keep func(x UserStatusOnline) bool) UserStatusOnlineArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s UserStatusOnlineArray) First() (v UserStatusOnline, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s UserStatusOnlineArray) Last() (v UserStatusOnline, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *UserStatusOnlineArray) PopFirst() (v UserStatusOnline, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero UserStatusOnline
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *UserStatusOnlineArray) Pop() (v UserStatusOnline, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// UserStatusOfflineArray is adapter for slice of UserStatusOffline.
type UserStatusOfflineArray []UserStatusOffline

// Sort sorts slice of UserStatusOffline.
func (s UserStatusOfflineArray) Sort(less func(a, b UserStatusOffline) bool) UserStatusOfflineArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of UserStatusOffline.
func (s UserStatusOfflineArray) SortStable(less func(a, b UserStatusOffline) bool) UserStatusOfflineArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of UserStatusOffline.
func (s UserStatusOfflineArray) Retain(keep func(x UserStatusOffline) bool) UserStatusOfflineArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s UserStatusOfflineArray) First() (v UserStatusOffline, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s UserStatusOfflineArray) Last() (v UserStatusOffline, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *UserStatusOfflineArray) PopFirst() (v UserStatusOffline, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero UserStatusOffline
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *UserStatusOfflineArray) Pop() (v UserStatusOffline, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// UserStatusRecentlyArray is adapter for slice of UserStatusRecently.
type UserStatusRecentlyArray []UserStatusRecently

// Sort sorts slice of UserStatusRecently.
func (s UserStatusRecentlyArray) Sort(less func(a, b UserStatusRecently) bool) UserStatusRecentlyArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of UserStatusRecently.
func (s UserStatusRecentlyArray) SortStable(less func(a, b UserStatusRecently) bool) UserStatusRecentlyArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of UserStatusRecently.
func (s UserStatusRecentlyArray) Retain(keep func(x UserStatusRecently) bool) UserStatusRecentlyArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s UserStatusRecentlyArray) First() (v UserStatusRecently, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s UserStatusRecentlyArray) Last() (v UserStatusRecently, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *UserStatusRecentlyArray) PopFirst() (v UserStatusRecently, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero UserStatusRecently
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *UserStatusRecentlyArray) Pop() (v UserStatusRecently, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// UserStatusLastWeekArray is adapter for slice of UserStatusLastWeek.
type UserStatusLastWeekArray []UserStatusLastWeek

// Sort sorts slice of UserStatusLastWeek.
func (s UserStatusLastWeekArray) Sort(less func(a, b UserStatusLastWeek) bool) UserStatusLastWeekArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of UserStatusLastWeek.
func (s UserStatusLastWeekArray) SortStable(less func(a, b UserStatusLastWeek) bool) UserStatusLastWeekArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of UserStatusLastWeek.
func (s UserStatusLastWeekArray) Retain(keep func(x UserStatusLastWeek) bool) UserStatusLastWeekArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s UserStatusLastWeekArray) First() (v UserStatusLastWeek, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s UserStatusLastWeekArray) Last() (v UserStatusLastWeek, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *UserStatusLastWeekArray) PopFirst() (v UserStatusLastWeek, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero UserStatusLastWeek
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *UserStatusLastWeekArray) Pop() (v UserStatusLastWeek, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// UserStatusLastMonthArray is adapter for slice of UserStatusLastMonth.
type UserStatusLastMonthArray []UserStatusLastMonth

// Sort sorts slice of UserStatusLastMonth.
func (s UserStatusLastMonthArray) Sort(less func(a, b UserStatusLastMonth) bool) UserStatusLastMonthArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of UserStatusLastMonth.
func (s UserStatusLastMonthArray) SortStable(less func(a, b UserStatusLastMonth) bool) UserStatusLastMonthArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of UserStatusLastMonth.
func (s UserStatusLastMonthArray) Retain(keep func(x UserStatusLastMonth) bool) UserStatusLastMonthArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s UserStatusLastMonthArray) First() (v UserStatusLastMonth, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s UserStatusLastMonthArray) Last() (v UserStatusLastMonth, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *UserStatusLastMonthArray) PopFirst() (v UserStatusLastMonth, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero UserStatusLastMonth
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *UserStatusLastMonthArray) Pop() (v UserStatusLastMonth, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
