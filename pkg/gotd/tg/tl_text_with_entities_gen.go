// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// TextWithEntities represents TL type `textWithEntities#751f3146`.
// Styled text with message entities¹
//
// Links:
//  1. https://core.telegram.org/api/entities
//
// See https://core.telegram.org/constructor/textWithEntities for reference.
type TextWithEntities struct {
	// Text
	Text string
	// Message entities for styled text¹
	//
	// Links:
	//  1) https://core.telegram.org/api/entities
	Entities []MessageEntityClass
}

// TextWithEntitiesTypeID is TL type id of TextWithEntities.
const TextWithEntitiesTypeID = 0x751f3146

// Ensuring interfaces in compile-time for TextWithEntities.
var (
	_ bin.Encoder     = &TextWithEntities{}
	_ bin.Decoder     = &TextWithEntities{}
	_ bin.BareEncoder = &TextWithEntities{}
	_ bin.BareDecoder = &TextWithEntities{}
)

func (t *TextWithEntities) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.Text == "") {
		return false
	}
	if !(t.Entities == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *TextWithEntities) String() string {
	if t == nil {
		return "TextWithEntities(nil)"
	}
	type Alias TextWithEntities
	return fmt.Sprintf("TextWithEntities%+v", Alias(*t))
}

// FillFrom fills TextWithEntities from given interface.
func (t *TextWithEntities) FillFrom(from interface {
	GetText() (value string)
	GetEntities() (value []MessageEntityClass)
}) {
	t.Text = from.GetText()
	t.Entities = from.GetEntities()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*TextWithEntities) TypeID() uint32 {
	return TextWithEntitiesTypeID
}

// TypeName returns name of type in TL schema.
func (*TextWithEntities) TypeName() string {
	return "textWithEntities"
}

// TypeInfo returns info about TL type.
func (t *TextWithEntities) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "textWithEntities",
		ID:   TextWithEntitiesTypeID,
	}
	if t == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Text",
			SchemaName: "text",
		},
		{
			Name:       "Entities",
			SchemaName: "entities",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (t *TextWithEntities) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textWithEntities#751f3146 as nil")
	}
	b.PutID(TextWithEntitiesTypeID)
	return t.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (t *TextWithEntities) EncodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textWithEntities#751f3146 as nil")
	}
	b.PutString(t.Text)
	b.PutVectorHeader(len(t.Entities))
	for idx, v := range t.Entities {
		if v == nil {
			return fmt.Errorf("unable to encode textWithEntities#751f3146: field entities element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode textWithEntities#751f3146: field entities element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (t *TextWithEntities) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textWithEntities#751f3146 to nil")
	}
	if err := b.ConsumeID(TextWithEntitiesTypeID); err != nil {
		return fmt.Errorf("unable to decode textWithEntities#751f3146: %w", err)
	}
	return t.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (t *TextWithEntities) DecodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textWithEntities#751f3146 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode textWithEntities#751f3146: field text: %w", err)
		}
		t.Text = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode textWithEntities#751f3146: field entities: %w", err)
		}

		if headerLen > 0 {
			t.Entities = make([]MessageEntityClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode textWithEntities#751f3146: field entities: %w", err)
			}
			t.Entities = append(t.Entities, value)
		}
	}
	return nil
}

// GetText returns value of Text field.
func (t *TextWithEntities) GetText() (value string) {
	if t == nil {
		return
	}
	return t.Text
}

// GetEntities returns value of Entities field.
func (t *TextWithEntities) GetEntities() (value []MessageEntityClass) {
	if t == nil {
		return
	}
	return t.Entities
}

// MapEntities returns field Entities wrapped in MessageEntityClassArray helper.
func (t *TextWithEntities) MapEntities() (value MessageEntityClassArray) {
	return MessageEntityClassArray(t.Entities)
}
