// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"go.mau.fi/mautrix-telegram/pkg/gotd/bin"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdjson"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tdp"
	"go.mau.fi/mautrix-telegram/pkg/gotd/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ResponseID represents TL type `responseID#85d7fd8b`.
//
// See https://localhost:80/doc/constructor/responseID for reference.
type ResponseID struct {
	// ID field of ResponseID.
	ID int32
}

// ResponseIDTypeID is TL type id of ResponseID.
const ResponseIDTypeID = 0x85d7fd8b

// construct implements constructor of ResponseClass.
func (r ResponseID) construct() ResponseClass { return &r }

// Ensuring interfaces in compile-time for ResponseID.
var (
	_ bin.Encoder     = &ResponseID{}
	_ bin.Decoder     = &ResponseID{}
	_ bin.BareEncoder = &ResponseID{}
	_ bin.BareDecoder = &ResponseID{}

	_ ResponseClass = &ResponseID{}
)

func (r *ResponseID) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.ID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *ResponseID) String() string {
	if r == nil {
		return "ResponseID(nil)"
	}
	type Alias ResponseID
	return fmt.Sprintf("ResponseID%+v", Alias(*r))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ResponseID) TypeID() uint32 {
	return ResponseIDTypeID
}

// TypeName returns name of type in TL schema.
func (*ResponseID) TypeName() string {
	return "responseID"
}

// TypeInfo returns info about TL type.
func (r *ResponseID) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "responseID",
		ID:   ResponseIDTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *ResponseID) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode responseID#85d7fd8b as nil")
	}
	b.PutID(ResponseIDTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *ResponseID) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode responseID#85d7fd8b as nil")
	}
	b.PutInt32(r.ID)
	return nil
}

// Decode implements bin.Decoder.
func (r *ResponseID) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode responseID#85d7fd8b to nil")
	}
	if err := b.ConsumeID(ResponseIDTypeID); err != nil {
		return fmt.Errorf("unable to decode responseID#85d7fd8b: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *ResponseID) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode responseID#85d7fd8b to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode responseID#85d7fd8b: field id: %w", err)
		}
		r.ID = value
	}
	return nil
}

// GetID returns value of ID field.
func (r *ResponseID) GetID() (value int32) {
	if r == nil {
		return
	}
	return r.ID
}

// ResponseText represents TL type `responseText#cb0244f2`.
//
// See https://localhost:80/doc/constructor/responseText for reference.
type ResponseText struct {
	// Text field of ResponseText.
	Text string
}

// ResponseTextTypeID is TL type id of ResponseText.
const ResponseTextTypeID = 0xcb0244f2

// construct implements constructor of ResponseClass.
func (r ResponseText) construct() ResponseClass { return &r }

// Ensuring interfaces in compile-time for ResponseText.
var (
	_ bin.Encoder     = &ResponseText{}
	_ bin.Decoder     = &ResponseText{}
	_ bin.BareEncoder = &ResponseText{}
	_ bin.BareDecoder = &ResponseText{}

	_ ResponseClass = &ResponseText{}
)

func (r *ResponseText) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Text == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *ResponseText) String() string {
	if r == nil {
		return "ResponseText(nil)"
	}
	type Alias ResponseText
	return fmt.Sprintf("ResponseText%+v", Alias(*r))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ResponseText) TypeID() uint32 {
	return ResponseTextTypeID
}

// TypeName returns name of type in TL schema.
func (*ResponseText) TypeName() string {
	return "responseText"
}

// TypeInfo returns info about TL type.
func (r *ResponseText) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "responseText",
		ID:   ResponseTextTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Text",
			SchemaName: "text",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *ResponseText) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode responseText#cb0244f2 as nil")
	}
	b.PutID(ResponseTextTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *ResponseText) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode responseText#cb0244f2 as nil")
	}
	b.PutString(r.Text)
	return nil
}

// Decode implements bin.Decoder.
func (r *ResponseText) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode responseText#cb0244f2 to nil")
	}
	if err := b.ConsumeID(ResponseTextTypeID); err != nil {
		return fmt.Errorf("unable to decode responseText#cb0244f2: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *ResponseText) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode responseText#cb0244f2 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode responseText#cb0244f2: field text: %w", err)
		}
		r.Text = value
	}
	return nil
}

// GetText returns value of Text field.
func (r *ResponseText) GetText() (value string) {
	if r == nil {
		return
	}
	return r.Text
}

// ResponseClassName is schema name of ResponseClass.
const ResponseClassName = "Response"

// ResponseClass represents Response generic type.
//
// See https://localhost:80/doc/type/Response for reference.
//
// Example:
//
//	g, err := td.DecodeResponse(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *td.ResponseID: // responseID#85d7fd8b
//	case *td.ResponseText: // responseText#cb0244f2
//	default: panic(v)
//	}
type ResponseClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() ResponseClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeResponse implements binary de-serialization for ResponseClass.
func DecodeResponse(buf *bin.Buffer) (ResponseClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ResponseIDTypeID:
		// Decoding responseID#85d7fd8b.
		v := ResponseID{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ResponseClass: %w", err)
		}
		return &v, nil
	case ResponseTextTypeID:
		// Decoding responseText#cb0244f2.
		v := ResponseText{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ResponseClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ResponseClass: %w", bin.NewUnexpectedID(id))
	}
}

// Response boxes the ResponseClass providing a helper.
type ResponseBox struct {
	Response ResponseClass
}

// Decode implements bin.Decoder for ResponseBox.
func (b *ResponseBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ResponseBox to nil")
	}
	v, err := DecodeResponse(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.Response = v
	return nil
}

// Encode implements bin.Encode for ResponseBox.
func (b *ResponseBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.Response == nil {
		return fmt.Errorf("unable to encode ResponseClass as nil")
	}
	return b.Response.Encode(buf)
}
