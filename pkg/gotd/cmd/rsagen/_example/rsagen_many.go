// Code generated by rsagen, DO NOT EDIT.
//
// -----BEGIN RSA PUBLIC KEY-----
// MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6
// lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS
// an9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw
// Efzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+
// 8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3n
// Slv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB
// -----END RSA PUBLIC KEY-----
// -----BEGIN PUBLIC KEY-----
// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAruw2yP/BCcsJliRoW5eB
// VBVle9dtjJw+OYED160Wybum9SXtBBLXriwt4rROd9csv0t0OHCaTmRqBcQ0J8fx
// hN6/cpR1GWgOZRUAiQxoMnlt0R93LCX/j1dnVa/gVbCjdSxpbrfY2g2L4frzjJvd
// l84Kd9ORYjDEAyFnEA7dD556OptgLQQ2e2iVNq8NZLYTzLp5YpOdO1doK+ttrltg
// gTCy5SrKeLoCPPbOgGsdxJxyz5KKcZnSLj16yE5HvJQn0CNpRdENvRUXe6tBP78O
// 39oJ8BTHp9oIjd6XWXAsp2CvK45Ol8wFXGF710w9lwCGNbmNxNYhtIkdqfsEcwR5
// JwIDAQAB
// -----END PUBLIC KEY-----
// -----BEGIN PUBLIC KEY-----
// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvfLHfYH2r9R70w8prHbl
// Wt/nDkh+XkgpflqQVcnAfSuTtO05lNPspQmL8Y2XjVT4t8cT6xAkdgfmmvnvRPOO
// KPi0OfJXoRVylFzAQG/j83u5K3kRLbae7fLccVhKZhY46lvsueI1hQdLgNV9n1cQ
// 3TDS2pQOCtovG4eDl9wacrXOJTG2990VjgnIKNA0UMoP+KF03qzryqIt3oTvZq03
// DyWdGK+AZjgBLaDKSnC6qD2cFY81UryRWOab8zKkWAnhw2kFpcqhI0jdV5QaSCEx
// vnsjVaX0Y1N0870931/5Jb9ICe4nweZ9kSDF/gip3kWLG0o8XQpChDfyvsqB9OLV
// /wIDAQAB
// -----END PUBLIC KEY-----
// -----BEGIN PUBLIC KEY-----
// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs/ditzm+mPND6xkhzwFI
// z6J/968CtkcSE/7Z2qAJiXbmZ3UDJPGrzqTDHkO30R8VeRM/Kz2f4nR05GIFiITl
// 4bEjvpy7xqRDspJcCFIOcyXm8abVDhF+th6knSU0yLtNKuQVP6voMrnt9MV1X92L
// GZQLgdHZbPQz0Z5qIpaKhdyA8DEvWWvSUwwc+yi1/gGaybwlzZwqXYoPOhwMebzK
// Uk0xW14htcJrRrq+PXXQbRzTMynseCoPIoke0dtCodbA3qQxQovE16q9zz4Otv2k
// 4j63cz53J+mhkVWAeWxVGI0lltJmWtEYK6er8VqqWot3nqmWMXogrgRLggv/Nbbo
// oQIDAQAB
// -----END PUBLIC KEY-----
// -----BEGIN PUBLIC KEY-----
// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvmpxVY7ld/8DAjz6F6q0
// 5shjg8/4p6047bn6/m8yPy1RBsvIyvuDuGnP/RzPEhzXQ9UJ5Ynmh2XJZgHoE9xb
// nfxL5BXHplJhMtADXKM9bWB11PU1Eioc3+AXBB8QiNFBn2XI5UkO5hPhbb9mJpjA
// 9Uhw8EdfqJP8QetVsI/xrCEbwEXe0xvifRLJbY08/Gp66KpQvy7g8w7VB8wlgePe
// xW3pT13Ap6vuC+mQuJPyiHvSxjEKHgqePji9NP3tJUFQjcECqcm0yV7/2d0t/pbC
// m+ZH1sadZspQCEPPrtbkQBlvHb4OLiIWPGHKSMeRFvp3IWcmdJqXahxLCUS1Eh6M
// AQIDAQAB
// -----END PUBLIC KEY-----
//

package example

import (
	"crypto/rsa"
	"math/big"
)

var _ = (*big.Int)(nil)

var ManyPK = []*rsa.PublicKey{
	{
		E: 65537,
		N: new(big.Int).SetBytes([]byte{
			0xc1, 0x50, 0x02, 0x3e, 0x2f, 0x70, 0xdb, 0x79,
			0x85, 0xde, 0xd0, 0x64, 0x75, 0x9c, 0xfe, 0xcf,
			0x0a, 0xf3, 0x28, 0xe6, 0x9a, 0x41, 0xda, 0xf4,
			0xd6, 0xf0, 0x1b, 0x53, 0x81, 0x35, 0xa6, 0xf9,
			0x1f, 0x8f, 0x8b, 0x2a, 0x0e, 0xc9, 0xba, 0x97,
			0x20, 0xce, 0x35, 0x2e, 0xfc, 0xf6, 0xc5, 0x68,
			0x0f, 0xfc, 0x42, 0x4b, 0xd6, 0x34, 0x86, 0x49,
			0x02, 0xde, 0x0b, 0x4b, 0xd6, 0xd4, 0x9f, 0x4e,
			0x58, 0x02, 0x30, 0xe3, 0xae, 0x97, 0xd9, 0x5c,
			0x8b, 0x19, 0x44, 0x2b, 0x3c, 0x0a, 0x10, 0xd8,
			0xf5, 0x63, 0x3f, 0xec, 0xed, 0xd6, 0x92, 0x6a,
			0x7f, 0x6d, 0xab, 0x0d, 0xdb, 0x7d, 0x45, 0x7f,
			0x9e, 0xa8, 0x1b, 0x84, 0x65, 0xfc, 0xd6, 0xff,
			0xfe, 0xed, 0x11, 0x40, 0x11, 0xdf, 0x91, 0xc0,
			0x59, 0xca, 0xed, 0xaf, 0x97, 0x62, 0x5f, 0x6c,
			0x96, 0xec, 0xc7, 0x47, 0x25, 0x55, 0x69, 0x34,
			0xef, 0x78, 0x1d, 0x86, 0x6b, 0x34, 0xf0, 0x11,
			0xfc, 0xe4, 0xd8, 0x35, 0xa0, 0x90, 0x19, 0x6e,
			0x9a, 0x5f, 0x0e, 0x44, 0x49, 0xaf, 0x7e, 0xb6,
			0x97, 0xdd, 0xb9, 0x07, 0x64, 0x94, 0xca, 0x5f,
			0x81, 0x10, 0x4a, 0x30, 0x5b, 0x6d, 0xd2, 0x76,
			0x65, 0x72, 0x2c, 0x46, 0xb6, 0x0e, 0x5d, 0xf6,
			0x80, 0xfb, 0x16, 0xb2, 0x10, 0x60, 0x7e, 0xf2,
			0x17, 0x65, 0x2e, 0x60, 0x23, 0x6c, 0x25, 0x5f,
			0x6a, 0x28, 0x31, 0x5f, 0x40, 0x83, 0xa9, 0x67,
			0x91, 0xd7, 0x21, 0x4b, 0xf6, 0x4c, 0x1d, 0xf4,
			0xfd, 0x0d, 0xb1, 0x94, 0x4f, 0xb2, 0x6a, 0x2a,
			0x57, 0x03, 0x1b, 0x32, 0xee, 0xe6, 0x4a, 0xd1,
			0x5a, 0x8b, 0xa6, 0x88, 0x85, 0xcd, 0xe7, 0x4a,
			0x5b, 0xfc, 0x92, 0x0f, 0x6a, 0xbf, 0x59, 0xba,
			0x5c, 0x75, 0x50, 0x63, 0x73, 0xe7, 0x13, 0x0f,
			0x90, 0x42, 0xda, 0x92, 0x21, 0x79, 0x25, 0x1f,
		}),
	}, // Fingerprint: c3b42b026ce86b21
	{
		E: 65537,
		N: new(big.Int).SetBytes([]byte{
			0xae, 0xec, 0x36, 0xc8, 0xff, 0xc1, 0x09, 0xcb,
			0x09, 0x96, 0x24, 0x68, 0x5b, 0x97, 0x81, 0x54,
			0x15, 0x65, 0x7b, 0xd7, 0x6d, 0x8c, 0x9c, 0x3e,
			0x39, 0x81, 0x03, 0xd7, 0xad, 0x16, 0xc9, 0xbb,
			0xa6, 0xf5, 0x25, 0xed, 0x04, 0x12, 0xd7, 0xae,
			0x2c, 0x2d, 0xe2, 0xb4, 0x4e, 0x77, 0xd7, 0x2c,
			0xbf, 0x4b, 0x74, 0x38, 0x70, 0x9a, 0x4e, 0x64,
			0x6a, 0x05, 0xc4, 0x34, 0x27, 0xc7, 0xf1, 0x84,
			0xde, 0xbf, 0x72, 0x94, 0x75, 0x19, 0x68, 0x0e,
			0x65, 0x15, 0x00, 0x89, 0x0c, 0x68, 0x32, 0x79,
			0x6d, 0xd1, 0x1f, 0x77, 0x2c, 0x25, 0xff, 0x8f,
			0x57, 0x67, 0x55, 0xaf, 0xe0, 0x55, 0xb0, 0xa3,
			0x75, 0x2c, 0x69, 0x6e, 0xb7, 0xd8, 0xda, 0x0d,
			0x8b, 0xe1, 0xfa, 0xf3, 0x8c, 0x9b, 0xdd, 0x97,
			0xce, 0x0a, 0x77, 0xd3, 0x91, 0x62, 0x30, 0xc4,
			0x03, 0x21, 0x67, 0x10, 0x0e, 0xdd, 0x0f, 0x9e,
			0x7a, 0x3a, 0x9b, 0x60, 0x2d, 0x04, 0x36, 0x7b,
			0x68, 0x95, 0x36, 0xaf, 0x0d, 0x64, 0xb6, 0x13,
			0xcc, 0xba, 0x79, 0x62, 0x93, 0x9d, 0x3b, 0x57,
			0x68, 0x2b, 0xeb, 0x6d, 0xae, 0x5b, 0x60, 0x81,
			0x30, 0xb2, 0xe5, 0x2a, 0xca, 0x78, 0xba, 0x02,
			0x3c, 0xf6, 0xce, 0x80, 0x6b, 0x1d, 0xc4, 0x9c,
			0x72, 0xcf, 0x92, 0x8a, 0x71, 0x99, 0xd2, 0x2e,
			0x3d, 0x7a, 0xc8, 0x4e, 0x47, 0xbc, 0x94, 0x27,
			0xd0, 0x23, 0x69, 0x45, 0xd1, 0x0d, 0xbd, 0x15,
			0x17, 0x7b, 0xab, 0x41, 0x3f, 0xbf, 0x0e, 0xdf,
			0xda, 0x09, 0xf0, 0x14, 0xc7, 0xa7, 0xda, 0x08,
			0x8d, 0xde, 0x97, 0x59, 0x70, 0x2c, 0xa7, 0x60,
			0xaf, 0x2b, 0x8e, 0x4e, 0x97, 0xcc, 0x05, 0x5c,
			0x61, 0x7b, 0xd7, 0x4c, 0x3d, 0x97, 0x00, 0x86,
			0x35, 0xb9, 0x8d, 0xc4, 0xd6, 0x21, 0xb4, 0x89,
			0x1d, 0xa9, 0xfb, 0x04, 0x73, 0x04, 0x79, 0x27,
		}),
	}, // Fingerprint: bc35f3509f7b7a5
	{
		E: 65537,
		N: new(big.Int).SetBytes([]byte{
			0xbd, 0xf2, 0xc7, 0x7d, 0x81, 0xf6, 0xaf, 0xd4,
			0x7b, 0xd3, 0x0f, 0x29, 0xac, 0x76, 0xe5, 0x5a,
			0xdf, 0xe7, 0x0e, 0x48, 0x7e, 0x5e, 0x48, 0x29,
			0x7e, 0x5a, 0x90, 0x55, 0xc9, 0xc0, 0x7d, 0x2b,
			0x93, 0xb4, 0xed, 0x39, 0x94, 0xd3, 0xec, 0xa5,
			0x09, 0x8b, 0xf1, 0x8d, 0x97, 0x8d, 0x54, 0xf8,
			0xb7, 0xc7, 0x13, 0xeb, 0x10, 0x24, 0x76, 0x07,
			0xe6, 0x9a, 0xf9, 0xef, 0x44, 0xf3, 0x8e, 0x28,
			0xf8, 0xb4, 0x39, 0xf2, 0x57, 0xa1, 0x15, 0x72,
			0x94, 0x5c, 0xc0, 0x40, 0x6f, 0xe3, 0xf3, 0x7b,
			0xb9, 0x2b, 0x79, 0x11, 0x2d, 0xb6, 0x9e, 0xed,
			0xf2, 0xdc, 0x71, 0x58, 0x4a, 0x66, 0x16, 0x38,
			0xea, 0x5b, 0xec, 0xb9, 0xe2, 0x35, 0x85, 0x07,
			0x4b, 0x80, 0xd5, 0x7d, 0x9f, 0x57, 0x10, 0xdd,
			0x30, 0xd2, 0xda, 0x94, 0x0e, 0x0a, 0xda, 0x2f,
			0x1b, 0x87, 0x83, 0x97, 0xdc, 0x1a, 0x72, 0xb5,
			0xce, 0x25, 0x31, 0xb6, 0xf7, 0xdd, 0x15, 0x8e,
			0x09, 0xc8, 0x28, 0xd0, 0x34, 0x50, 0xca, 0x0f,
			0xf8, 0xa1, 0x74, 0xde, 0xac, 0xeb, 0xca, 0xa2,
			0x2d, 0xde, 0x84, 0xef, 0x66, 0xad, 0x37, 0x0f,
			0x25, 0x9d, 0x18, 0xaf, 0x80, 0x66, 0x38, 0x01,
			0x2d, 0xa0, 0xca, 0x4a, 0x70, 0xba, 0xa8, 0x3d,
			0x9c, 0x15, 0x8f, 0x35, 0x52, 0xbc, 0x91, 0x58,
			0xe6, 0x9b, 0xf3, 0x32, 0xa4, 0x58, 0x09, 0xe1,
			0xc3, 0x69, 0x05, 0xa5, 0xca, 0xa1, 0x23, 0x48,
			0xdd, 0x57, 0x94, 0x1a, 0x48, 0x21, 0x31, 0xbe,
			0x7b, 0x23, 0x55, 0xa5, 0xf4, 0x63, 0x53, 0x74,
			0xf3, 0xbd, 0x3d, 0xdf, 0x5f, 0xf9, 0x25, 0xbf,
			0x48, 0x09, 0xee, 0x27, 0xc1, 0xe6, 0x7d, 0x91,
			0x20, 0xc5, 0xfe, 0x08, 0xa9, 0xde, 0x45, 0x8b,
			0x1b, 0x4a, 0x3c, 0x5d, 0x0a, 0x42, 0x84, 0x37,
			0xf2, 0xbe, 0xca, 0x81, 0xf4, 0xe2, 0xd5, 0xff,
		}),
	}, // Fingerprint: 15ae5fa8b5529542
	{
		E: 65537,
		N: new(big.Int).SetBytes([]byte{
			0xb3, 0xf7, 0x62, 0xb7, 0x39, 0xbe, 0x98, 0xf3,
			0x43, 0xeb, 0x19, 0x21, 0xcf, 0x01, 0x48, 0xcf,
			0xa2, 0x7f, 0xf7, 0xaf, 0x02, 0xb6, 0x47, 0x12,
			0x13, 0xfe, 0xd9, 0xda, 0xa0, 0x09, 0x89, 0x76,
			0xe6, 0x67, 0x75, 0x03, 0x24, 0xf1, 0xab, 0xce,
			0xa4, 0xc3, 0x1e, 0x43, 0xb7, 0xd1, 0x1f, 0x15,
			0x79, 0x13, 0x3f, 0x2b, 0x3d, 0x9f, 0xe2, 0x74,
			0x74, 0xe4, 0x62, 0x05, 0x88, 0x84, 0xe5, 0xe1,
			0xb1, 0x23, 0xbe, 0x9c, 0xbb, 0xc6, 0xa4, 0x43,
			0xb2, 0x92, 0x5c, 0x08, 0x52, 0x0e, 0x73, 0x25,
			0xe6, 0xf1, 0xa6, 0xd5, 0x0e, 0x11, 0x7e, 0xb6,
			0x1e, 0xa4, 0x9d, 0x25, 0x34, 0xc8, 0xbb, 0x4d,
			0x2a, 0xe4, 0x15, 0x3f, 0xab, 0xe8, 0x32, 0xb9,
			0xed, 0xf4, 0xc5, 0x75, 0x5f, 0xdd, 0x8b, 0x19,
			0x94, 0x0b, 0x81, 0xd1, 0xd9, 0x6c, 0xf4, 0x33,
			0xd1, 0x9e, 0x6a, 0x22, 0x96, 0x8a, 0x85, 0xdc,
			0x80, 0xf0, 0x31, 0x2f, 0x59, 0x6b, 0xd2, 0x53,
			0x0c, 0x1c, 0xfb, 0x28, 0xb5, 0xfe, 0x01, 0x9a,
			0xc9, 0xbc, 0x25, 0xcd, 0x9c, 0x2a, 0x5d, 0x8a,
			0x0f, 0x3a, 0x1c, 0x0c, 0x79, 0xbc, 0xca, 0x52,
			0x4d, 0x31, 0x5b, 0x5e, 0x21, 0xb5, 0xc2, 0x6b,
			0x46, 0xba, 0xbe, 0x3d, 0x75, 0xd0, 0x6d, 0x1c,
			0xd3, 0x33, 0x29, 0xec, 0x78, 0x2a, 0x0f, 0x22,
			0x89, 0x1e, 0xd1, 0xdb, 0x42, 0xa1, 0xd6, 0xc0,
			0xde, 0xa4, 0x31, 0x42, 0x8b, 0xc4, 0xd7, 0xaa,
			0xbd, 0xcf, 0x3e, 0x0e, 0xb6, 0xfd, 0xa4, 0xe2,
			0x3e, 0xb7, 0x73, 0x3e, 0x77, 0x27, 0xe9, 0xa1,
			0x91, 0x55, 0x80, 0x79, 0x6c, 0x55, 0x18, 0x8d,
			0x25, 0x96, 0xd2, 0x66, 0x5a, 0xd1, 0x18, 0x2b,
			0xa7, 0xab, 0xf1, 0x5a, 0xaa, 0x5a, 0x8b, 0x77,
			0x9e, 0xa9, 0x96, 0x31, 0x7a, 0x20, 0xae, 0x04,
			0x4b, 0x82, 0x0b, 0xff, 0x35, 0xb6, 0xe8, 0xa1,
		}),
	}, // Fingerprint: aeae98e13cd7f94f
	{
		E: 65537,
		N: new(big.Int).SetBytes([]byte{
			0xbe, 0x6a, 0x71, 0x55, 0x8e, 0xe5, 0x77, 0xff,
			0x03, 0x02, 0x3c, 0xfa, 0x17, 0xaa, 0xb4, 0xe6,
			0xc8, 0x63, 0x83, 0xcf, 0xf8, 0xa7, 0xad, 0x38,
			0xed, 0xb9, 0xfa, 0xfe, 0x6f, 0x32, 0x3f, 0x2d,
			0x51, 0x06, 0xcb, 0xc8, 0xca, 0xfb, 0x83, 0xb8,
			0x69, 0xcf, 0xfd, 0x1c, 0xcf, 0x12, 0x1c, 0xd7,
			0x43, 0xd5, 0x09, 0xe5, 0x89, 0xe6, 0x87, 0x65,
			0xc9, 0x66, 0x01, 0xe8, 0x13, 0xdc, 0x5b, 0x9d,
			0xfc, 0x4b, 0xe4, 0x15, 0xc7, 0xa6, 0x52, 0x61,
			0x32, 0xd0, 0x03, 0x5c, 0xa3, 0x3d, 0x6d, 0x60,
			0x75, 0xd4, 0xf5, 0x35, 0x12, 0x2a, 0x1c, 0xdf,
			0xe0, 0x17, 0x04, 0x1f, 0x10, 0x88, 0xd1, 0x41,
			0x9f, 0x65, 0xc8, 0xe5, 0x49, 0x0e, 0xe6, 0x13,
			0xe1, 0x6d, 0xbf, 0x66, 0x26, 0x98, 0xc0, 0xf5,
			0x48, 0x70, 0xf0, 0x47, 0x5f, 0xa8, 0x93, 0xfc,
			0x41, 0xeb, 0x55, 0xb0, 0x8f, 0xf1, 0xac, 0x21,
			0x1b, 0xc0, 0x45, 0xde, 0xd3, 0x1b, 0xe2, 0x7d,
			0x12, 0xc9, 0x6d, 0x8d, 0x3c, 0xfc, 0x6a, 0x7a,
			0xe8, 0xaa, 0x50, 0xbf, 0x2e, 0xe0, 0xf3, 0x0e,
			0xd5, 0x07, 0xcc, 0x25, 0x81, 0xe3, 0xde, 0xc5,
			0x6d, 0xe9, 0x4f, 0x5d, 0xc0, 0xa7, 0xab, 0xee,
			0x0b, 0xe9, 0x90, 0xb8, 0x93, 0xf2, 0x88, 0x7b,
			0xd2, 0xc6, 0x31, 0x0a, 0x1e, 0x0a, 0x9e, 0x3e,
			0x38, 0xbd, 0x34, 0xfd, 0xed, 0x25, 0x41, 0x50,
			0x8d, 0xc1, 0x02, 0xa9, 0xc9, 0xb4, 0xc9, 0x5e,
			0xff, 0xd9, 0xdd, 0x2d, 0xfe, 0x96, 0xc2, 0x9b,
			0xe6, 0x47, 0xd6, 0xc6, 0x9d, 0x66, 0xca, 0x50,
			0x08, 0x43, 0xcf, 0xae, 0xd6, 0xe4, 0x40, 0x19,
			0x6f, 0x1d, 0xbe, 0x0e, 0x2e, 0x22, 0x16, 0x3c,
			0x61, 0xca, 0x48, 0xc7, 0x91, 0x16, 0xfa, 0x77,
			0x21, 0x67, 0x26, 0x74, 0x9a, 0x97, 0x6a, 0x1c,
			0x4b, 0x09, 0x44, 0xb5, 0x12, 0x1e, 0x8c, 0x01,
		}),
	}, // Fingerprint: 5a181b2235057d98
}
